{
  "openapi": "3.0.1",
  "info": {
    "description": "The Yapily API enables connections between your application and users' banks. For more information check out our [documentation](https://docs.yapily.com/).<br><br>In particular, make sure to view our [Getting Started](https://docs.yapily.com/#getting-started) steps if this is your first time here.<br><br>While testing the API, our list of [sandbox credentials](https://docs.yapily.com/guides/applications/institutions/sandbox/) maybe useful.",
    "title": "Yapily API",
    "version": "2.1.0",
    "contact": {
      "name": "Yapily Support",
      "url": "https://docs.yapily.com/support/",
      "email": "support@yapily.com"
    }
  },
  "servers": [
    {
      "url": "https://api.yapily.com"
    }
  ],
  "security": [
    {
      "basicAuth": [
      ]
    }
  ],
  "tags": [
    {
      "description": "The `Application` is the base entity that is used to interact with the API and contains a collection of `Institution` objects. You can have multiple Applications associated with your account e.g. a production application with live access to each `Institution` and a development application with access to sandboxes.",
      "name": "Application"
    },
    {
      "description": "The Users endpoints are used to manage each user (otherwise known as the PSU) in Yapily. Each user belongs to an Application and as a consequence, so do each `Consent` created for a particular `User`.",
      "name": "Users"
    },
    {
      "description": "An `Institution` object represents any Account Serving Payment Servicing Provider (ASPSP) that has been integrated and is accessible through the Yapily APIs (ASPSPs are entities that publish Read/Write APIs to permit, with customer consent, payments initiated by third party providers and/or make their customersï¿½ financial data available to third party providers via their API endpoints).<br><br>Any one of the following would be represented as Institution:<ul><li>Traditional banks e.g. Santander</li><li>Neo-banks e.g. Monzo</li><li>Building societies e.g. Cumberland Building Society</li></ul>",
      "name": "Institutions"
    },
    {
      "description": "The Consents endpoints are used to manage each `Consent` created by Yapily in response to an authorisation created for a user.<br><br>The `Consent` object contains data that identifies a user's consent for a specific `Institution` within a Yapily application. Other than the id of the consent, the `institution-id` for the corresponding `Institution` and the user identifiers (`user-uuid` and `application-user-id`), it contains various details that indicates how the `Consent` can be used.",
      "name": "Consents"
    },
    {
      "description": "Before calling [Financial Data](#yapily-api-financial-data) or [Payments](#yapily-api-payments) endpoints, a consent from an end-user must be obtained.<br><br>Consents are valid for up to 90 days for Financial Data endpoints and have a single-use for Payment endpoints i.e. a new consent must be obtained for each payment.<aside class=\"info\">NOTE: A user consent is also referred to as an 'Authorisation'.</aside>",
      "name": "Authorisations"
    },
    {
      "description": "In order to access a user's Financial Data, you are required to request an [Authorisation](#yapily-api-authorisations) from the user to share the account information the bank has. Once a `consent-token` is obtained, you can call the necessary Financial Data endpoint(s) to retrieve the user's data.",
      "name": "Financial Data"
    },
    {
      "description": "In order to make a Payment on behalf of a user, you are required to request an [Authorisation](#yapily-api-authorisations) from the user to authorise the user's account to make the payment from. Once a `consent-token` is obtained, you can call the necessary Payments endpoint(s) to execute a payment.",
      "name": "Payments"
    },
    {
      "description": "The Financial Profile endpoints assist in collating authorised consents for a user which can subsequently be used to classify user income streams across multiple accounts. For each income stream, the financial profile determines the frequency and score that describes how well the income stream fits to that schedule.\n\n",
      "name": "Financial Profile"
    }
  ],
  "paths": {
    "/account-auth-requests": {
      "patch": {
        "description": "Used to prompt the account holder for continued access to their financial data. This endpoint should be used when a `Consent` that was previously `AUTHORIZED` can no longer be used to retrieve data.<br><br>See [Re-Authorisation](https://docs.yapily.com/guides/financial-data/consents/#re-authorisation) for more information.",
        "operationId": "reAuthoriseAccount",
        "parameters": [
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "OBIE Example Response": {
                    "description": "OBIE Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "8719f9c97272463d9c2d1ee6108c8e24"
                      },
                      "data": {
                        "id": "2812b61c-9d0b-4730-8c94-22c18918e66a",
                        "userUuid": "3ddf5dd0-aa48-4d0f-baa7-fa057e9e911d",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "modelo-sandbox",
                        "status": "AWAITING_RE_AUTHORIZATION",
                        "createdAt": "2021-06-09T08:22:50.135Z",
                        "featureScope": [
                          "ACCOUNT_STATEMENT_FILE",
                          "ACCOUNT_TRANSACTIONS",
                          "ACCOUNT_STATEMENTS",
                          "ACCOUNTS",
                          "ACCOUNT"
                        ],
                        "state": "0623e536c5044b4aa3f6c66e7537bee0",
                        "authorizedAt": "2021-06-09T08:23:03.944Z",
                        "institutionConsentId": "aac-f7847e99-7c66-4bb8-8641-61a24057f2e8",
                        "authorisationUrl": "https://ob19-auth1-ui.o3bank.co.uk/auth?client_id=e7f6b95b-5f35-419b-b301-8b08bcd946de&response_type=code+id_token&state=0623e536c5044b4aa3f6c66e7537bee0&nonce=0623e536c5044b4aa3f6c66e7537bee0&scope=openid+accounts&redirect_uri=https%3A%2F%2Fauth.yapily.com%2F&request=eyJraWQiOiJnRTRvU3VaZDl4TVpUNXZDdTNWYy1mdktNak0iLCJhbGciOiJQUzI1NiJ9.eyJhdWQiOiJodHRwczovL29iMTktYXV0aDEtdWkubzNiYW5rLmNvLnVrIiwic2NvcGUiOiJvcGVuaWQgYWNjb3VudHMiLCJpc3MiOiJlN2Y2Yjk1Yi01ZjM1LTQxOWItYjMwMS04YjA4YmNkOTQ2ZGUiLCJjbGllbnRfaWQiOiJlN2Y2Yjk1Yi01ZjM1LTQxOWItYjMwMS04YjA4YmNkOTQ2ZGUiLCJyZXNwb25zZV90eXBlIjoiY29kZSBpZF90b2tlbiIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOi8vYXV0aC55YXBpbHkuY29tLyIsInN0YXRlIjoiMDYyM2U1MzZjNTA0NGI0YWEzZjZjNjZlNzUzN2JlZTAiLCJjbGFpbXMiOnsiaWRfdG9rZW4iOnsiYWNyIjp7InZhbHVlIjoidXJuOm9wZW5iYW5raW5nOnBzZDI6c2NhIiwiZXNzZW50aWFsIjp0cnVlfSwib3BlbmJhbmtpbmdfaW50ZW50X2lkIjp7InZhbHVlIjoiYWFjLWY3ODQ3ZTk5LTdjNjYtNGJiOC04NjQxLTYxYTI0MDU3ZjJlOCIsImVzc2VudGlhbCI6dHJ1ZX19LCJ1c2VyaW5mbyI6eyJvcGVuYmFua2luZ19pbnRlbnRfaWQiOnsidmFsdWUiOiJhYWMtZjc4NDdlOTktN2M2Ni00YmI4LTg2NDEtNjFhMjQwNTdmMmU4IiwiZXNzZW50aWFsIjp0cnVlfX19LCJub25jZSI6IjA2MjNlNTM2YzUwNDRiNGFhM2Y2YzY2ZTc1MzdiZWUwIiwianRpIjoiMjEyM2E1OGMtMTExYi00OGY2LTg2ODAtZTViYTNiMzI3MjM5IiwiaWF0IjoxNjIzMjI3MDAxLCJleHAiOjE2MjMyMjg4MDF9.JG5lc5TWjCucWZPfcyd34trk0QcGNzhYXfhHTlVrcfu1zjrAtSUI8i0o4yKqS19cOGKHq1HtuQac2hhO8gCr_vd5n7eIuIrWfjEM1MuIwsJ85jOpMBkEiSOurLRIgW77VmqHpVUVj5-0-1Tk-N-vaC_4nIdtSi576sOb4rjLQvs2EX_sFODGjyMxHXiZlnr2p71gA3nRy8M2Vv_At4-NPW8OLULS8zXclWoK797HFAGtsNLCy8tz0YCsnEaFhcLhZSliy3a7DRfxvBmIzhY23M4uQ6bpM1zCyqTPsOhqR-qdgnZorBrax_2CQ37yIeV4becUJWvZSdnjYX7gDtNltA",
                        "qrCodeUrl": "https://images.yapily.com/image/4ef6e16c-dbe2-4d90-9e1b-868d946082ef/1623227001?size=0"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfAuthorisationRequestResponse"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Re-authorise Account Consent",
        "tags": [
          "Authorisations"
        ]
      },
      "post": {
        "description": "Used to initiate the authorisation process and direct users to the login screen of their financial institution in order to give consent to access account data.<br><br>See [Redirect Account Flows](https://docs.yapily.com/guides/financial-data/account-authorisation-flows/redirect/) for more information about this flow.<br><br>Feature: `INITIATE_ACCOUNT_REQUEST`",
        "operationId": "initiateAccountRequest",
        "parameters": [
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "CBI Globe Example Request": {
                  "description": "CBI Globe Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "bpm-sandbox",
                    "callback": "https://display-parameters.com/",
                    "accountRequest": {
                      "accountIdentifiersForBalance": [
                        {
                          "accountId": "account1234567",
                          "accountIdentification": {
                            "type": "IBAN",
                            "identification": "IT77O0848283352871412938123"
                          }
                        }
                      ],
                      "accountIdentifiersForTransaction": [
                        {
                          "accountId": "account1234567",
                          "accountIdentification": {
                            "type": "IBAN",
                            "identification": "IT77O0848283352871412938123"
                          }
                        }
                      ]
                    }
                  }
                },
                "OBIE Example Request": {
                  "description": "OBIE Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "modelo-sandbox",
                    "callback": "https://display-parameters.com/"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/AccountAuthorisationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "CBI Globe Example Response": {
                    "description": "CBI Globe Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "a55a89c4a27b41129e484d74fc338121"
                      },
                      "data": {
                        "id": "4f988304-67ea-4ea9-a61e-cb90cac37f78",
                        "userUuid": "3ddf5dd0-aa48-4d0f-baa7-fa057e9e911d",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "bpm-sandbox",
                        "status": "AWAITING_AUTHORIZATION",
                        "createdAt": "2021-06-09T11:06:54.132Z",
                        "expiresAt": "2021-09-07T00:00:00Z",
                        "timeToExpire": "P89DT12H53M5.589S",
                        "featureScope": [
                          "ACCOUNT_BALANCES",
                          "ACCOUNT_TRANSACTIONS"
                        ],
                        "state": "a55ae8debaad4fb991b73a3a912a2004",
                        "institutionConsentId": "bdbd7ad0-b2d1-4a5c-9173-3586f30bc575",
                        "authorisationUrl": "https://scasandbox.bancobpm.it/sca/login.html?idRichiestaSCA=20210609110654029&tipoRisorsa=C&codiceASPSP=05034",
                        "qrCodeUrl": "https://images.yapily.com/image/72095dc7-4a23-4971-9a7f-e3f9c6af7921/1623236814?size=0"
                      }
                    }
                  },
                  "OBIE Example Response": {
                    "description": "OBIE Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "3b262569303f47f188d16b43acd552c0"
                      },
                      "data": {
                        "id": "2d5c3632-1729-4a5e-bc69-c7fa1cbba815",
                        "userUuid": "3ddf5dd0-aa48-4d0f-baa7-fa057e9e911d",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "modelo-sandbox",
                        "status": "AWAITING_AUTHORIZATION",
                        "createdAt": "2021-06-09T08:03:20.510Z",
                        "featureScope": [
                          "ACCOUNT_STATEMENT_FILE",
                          "ACCOUNTS",
                          "ACCOUNT_STATEMENTS",
                          "ACCOUNT_TRANSACTIONS",
                          "ACCOUNT",
                          "ACCOUNT_BALANCES",
                          "ACCOUNT_STATEMENT",
                          "ACCOUNT_SCHEDULED_PAYMENTS",
                          "ACCOUNT_TRANSACTIONS_WITH_MERCHANT",
                          "ACCOUNT_PERIODIC_PAYMENTS",
                          "ACCOUNT_BENEFICIARIES",
                          "IDENTITY",
                          "ACCOUNT_DIRECT_DEBITS"
                        ],
                        "state": "7948ba4d6a064001b06ef28f8c06ca4a",
                        "institutionConsentId": "aac-0a743a0f-0b7d-4e7b-87eb-0bc65e1d2f97",
                        "authorisationUrl": "https://ob19-auth1-ui.o3bank.co.uk/auth?client_id=e7f6b95b-5f35-419b-b301-8b08bcd946de&response_type=code+id_token&state=7948ba4d6a064001b06ef28f8c06ca4a&nonce=7948ba4d6a064001b06ef28f8c06ca4a&scope=openid+accounts&redirect_uri=https%3A%2F%2Fauth.yapily.com%2F&request=eyJraWQiOiJnRTRvU3VaZDl4TVpUNXZDdTNWYy1mdktNak0iLCJhbGciOiJQUzI1NiJ9.eyJhdWQiOiJodHRwczovL29iMTktYXV0aDEtdWkubzNiYW5rLmNvLnVrIiwic2NvcGUiOiJvcGVuaWQgYWNjb3VudHMiLCJpc3MiOiJlN2Y2Yjk1Yi01ZjM1LTQxOWItYjMwMS04YjA4YmNkOTQ2ZGUiLCJjbGllbnRfaWQiOiJlN2Y2Yjk1Yi01ZjM1LTQxOWItYjMwMS04YjA4YmNkOTQ2ZGUiLCJyZXNwb25zZV90eXBlIjoiY29kZSBpZF90b2tlbiIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOi8vYXV0aC55YXBpbHkuY29tLyIsInN0YXRlIjoiNzk0OGJhNGQ2YTA2NDAwMWIwNmVmMjhmOGMwNmNhNGEiLCJjbGFpbXMiOnsiaWRfdG9rZW4iOnsiYWNyIjp7InZhbHVlIjoidXJuOm9wZW5iYW5raW5nOnBzZDI6c2NhIiwiZXNzZW50aWFsIjp0cnVlfSwib3BlbmJhbmtpbmdfaW50ZW50X2lkIjp7InZhbHVlIjoiYWFjLTBhNzQzYTBmLTBiN2QtNGU3Yi04N2ViLTBiYzY1ZTFkMmY5NyIsImVzc2VudGlhbCI6dHJ1ZX19LCJ1c2VyaW5mbyI6eyJvcGVuYmFua2luZ19pbnRlbnRfaWQiOnsidmFsdWUiOiJhYWMtMGE3NDNhMGYtMGI3ZC00ZTdiLTg3ZWItMGJjNjVlMWQyZjk3IiwiZXNzZW50aWFsIjp0cnVlfX19LCJub25jZSI6Ijc5NDhiYTRkNmEwNjQwMDFiMDZlZjI4ZjhjMDZjYTRhIiwianRpIjoiNTIxNGFjNTQtNTEzYi00N2Y1LTgyYjUtZWExY2NhYzg0YzNiIiwiaWF0IjoxNjIzMjI1ODAxLCJleHAiOjE2MjMyMjc2MDF9.wmNfzJD1ekN_f028qWOyVvICkFm2uJ5Umok4hmxk4HZnDY2AOWDg4VX_MJjPHDydhfW8ZciBfCbEgmnButmASBbil-tHzwDIholS4RmnOZ4DXD-AttYx_VA2_X36J53kmlCHstPZpoawSIzdcnyW0JIhmVEvs5ZsaJvsDKhWk0hgYNS2GI0PORcn85W98EaE8APVrsz-tR-EfC9NmSZu7tH1zLyyD43AuD2BqdlMiYVTlzZsJ3FGPZ-ddT0rRloJvxPV6GLibjNAEowpSLjmDLv2v7gWszmYgcrzp5UM2jllfVL2KPA6Be5Eg6LVkL60Q3FKQyOMc8SCAWhALq_7Ew",
                        "qrCodeUrl": "https://images.yapily.com/image/3b634d3c-a2ce-49b8-9014-330661800604/1623225801?size=0"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfAuthorisationRequestResponse"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Create Account Authorisation",
        "tags": [
          "Authorisations"
        ]
      },
      "put": {
        "description": "Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to access account data. <br><br>See [Redirect Account Flows](https://docs.yapily.com/guides/financial-data/account-authorisation-flows/redirect/) for more information about this flow. <br><br>Features: <ul><li>`INITIATE_ACCOUNT_REQUEST`</li><li>`INITIATE_PRE_AUTHORISATION`</li></ul>",
        "operationId": "updatePreAuthoriseAccountConsent",
        "parameters": [
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "Berlin Group Example Request": {
                  "description": "Berlin Group Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "n26"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/AccountAuthorisationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "OBIE Example Response": {
                    "description": "OBIE Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "ee8e5bcfedf348b18ae45a34135790cc"
                      },
                      "data": {
                        "id": "68e14e00-38b0-467d-a999-f70340e467b3",
                        "userUuid": "e2578545-27a4-4edf-983f-5d33c2d7b559",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "n26",
                        "institutionConsentId": "87ec9ded-d5ea-4fb6-80c5-ad4c88246c9f",
                        "state": "4f4f9766f7264afc96a5269d6e65e066",
                        "status": "AWAITING_DECOUPLED_AUTHORIZATION",
                        "authorizedAt": "2021-05-13T09:00:06.867Z",
                        "createdAt": "2021-05-13T08:59:23.864Z",
                        "featureScope": [
                          "ACCOUNT_TRANSACTIONS",
                          "INITIATE_PRE_AUTHORISATION",
                          "ACCOUNTS",
                          "ACCOUNT_TRANSACTIONS_WITH_MERCHANT"
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfAuthorisationRequestResponse"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Update Account Pre-authorisation",
        "tags": [
          "Authorisations"
        ]
      }
    },
    "/accounts": {
      "get": {
        "description": "Used to return all accounts and balances for the end user associated with the presented consent token.<br><br>Feature: `ACCOUNTS`",
        "operationId": "getAccounts",
        "parameters": [
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "OBIE Example Response": {
                    "description": "OBIE Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "1139346006be4345a94fd8b3728844e3",
                        "count": 1
                      },
                      "data": [
                        {
                          "id": "700004000000000000000002",
                          "type": "Personal - Current",
                          "balance": -12.57,
                          "currency": "GBP",
                          "usageType": "PERSONAL",
                          "accountType": "CURRENT",
                          "nickname": "xxxx0006",
                          "accountNames": [
                            {
                              "name": "Mr. Roberto Rastapopoulos & Ivan Sakharine"
                            }
                          ],
                          "accountIdentifications": [
                            {
                              "type": "SORT_CODE",
                              "identification": "700001"
                            },
                            {
                              "type": "ACCOUNT_NUMBER",
                              "identification": "70000002"
                            }
                          ],
                          "accountBalances": [
                            {
                              "type": "EXPECTED",
                              "dateTime": "2021-06-09T08:51:02.463Z",
                              "balanceAmount": {
                                "amount": -12.57,
                                "currency": "GBP"
                              },
                              "creditLineIncluded": false,
                              "creditLines": []
                            }
                          ]
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/AccountApiListResponse"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Accounts",
        "tags": [
          "Financial Data"
        ]
      }
    },
    "/accounts/{accountId}": {
      "get": {
        "description": "Used to return the account and balance information for the end user associated with the presented consent token.<br><br>Feature: `ACCOUNTS`",
        "operationId": "getAccount",
        "parameters": [
          {
            "description": "__Mandatory__. The account Id of the user's bank account.",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "OBIE Example Response": {
                    "description": "OBIE Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "01191f59dcd54be2854a7e686702dbd6"
                      },
                      "data": {
                        "id": "700004000000000000000002",
                        "type": "Personal - Current",
                        "balance": -12.57,
                        "currency": "GBP",
                        "usageType": "PERSONAL",
                        "accountType": "CURRENT",
                        "nickname": "xxxx0006",
                        "accountNames": [
                          {
                            "name": "Mr. Roberto Rastapopoulos & Ivan Sakharine"
                          }
                        ],
                        "accountIdentifications": [
                          {
                            "type": "SORT_CODE",
                            "identification": "700001"
                          },
                          {
                            "type": "ACCOUNT_NUMBER",
                            "identification": "70000002"
                          }
                        ],
                        "accountBalances": [
                          {
                            "type": "EXPECTED",
                            "dateTime": "2021-06-09T08:51:02.463Z",
                            "balanceAmount": {
                              "amount": -12.57,
                              "currency": "GBP"
                            },
                            "creditLineIncluded": false,
                            "creditLines": []
                          }
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfAccount"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Account",
        "tags": [
          "Financial Data"
        ]
      }
    },
    "/accounts/{accountId}/balances": {
      "get": {
        "description": "Used to return the balance for the end user associated with the presented consent token.<br><br>\n__Note__: This endpoint is only for obtaining the balance information of an account belonging to an `Institution` that exposes their APIs through the [CBI Globe Gateway](https://docs.yapily.com/knowledge/cbi_globe/). If the `Institution` you wish to obtain balance data is not in the CBI Globe, use [Get Account](https://docs.yapily.com/api/#get-account) or [Get Accounts](https://docs.yapily.com/api/#get-accounts) to get balance data. <br><br>Feature: `ACCOUNT_BALANCES` ",
        "operationId": "getAccountBalances",
        "parameters": [
          {
            "description": "__Mandatory__. The account Id of the user's bank account.",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "CBI Globe Example Response": {
                    "description": "CBI Globe Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "82e86ae9547a4f04b3773c1207e4b84d"
                      },
                      "data": {
                        "mainBalanceAmount": {
                          "amount": -3.07920860411E9,
                          "currency": "EUR"
                        },
                        "balances": [
                          {
                            "type": "INTERIM_AVAILABLE",
                            "balanceAmount": {
                              "amount": -3.07920860411E9,
                              "currency": "EUR"
                            }
                          },
                          {
                            "type": "AUTHORISED",
                            "balanceAmount": {
                              "amount": -3.07920860411E9,
                              "currency": "EUR"
                            }
                          }
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfBalances"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Account Balances",
        "tags": [
          "Financial Data"
        ]
      }
    },
    "/accounts/{accountId}/beneficiaries": {
      "get": {
        "description": "Used to get all the beneficiaries of a user's account<br><br>Feature: `ACCOUNT_BENEFICIARIES`",
        "operationId": "getBeneficiaries",
        "parameters": [
          {
            "description": "__Mandatory__. The account Id of the user's bank account.",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "OBIE Example Response": {
                    "description": "OBIE Example Response",
                    "value": {
                      "data": [
                        {
                          "id": "112",
                          "trusted": true,
                          "reference": "Rent",
                          "payee": {
                            "name": "John Doe",
                            "accountIdentifications": [
                              {
                                "type": "SORT_CODE",
                                "identification": "123456"
                              },
                              {
                                "type": "ACCOUNT_NUMBER",
                                "identification": "12345678"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiListResponseOfBeneficiary"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Account Beneficiaries",
        "tags": [
          "Financial Data"
        ]
      }
    },
    "/accounts/{accountId}/direct-debits": {
      "get": {
        "description": "Used to get the list of direct debits for an account.<br><br>Feature: `ACCOUNT_DIRECT_DEBIT`",
        "operationId": "getAccountDirectDebits",
        "parameters": [
          {
            "description": "__Mandatory__. The account Id of the user's bank account.",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "OBIE Example Response": {
                    "description": "OBIE Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "c2dec674a3fb402e8543129565491244",
                        "count": 2,
                        "pagination": {
                          "totalCount": 2,
                          "self": {
                            "limit": 1000
                          }
                        }
                      },
                      "data": [
                        {
                          "id": "700009000000000000000076",
                          "statusDetails": {
                            "status": "INACTIVE"
                          },
                          "payeeDetails": {
                            "name": "EDF ENERGY"
                          },
                          "reference": "671018097704",
                          "previousPaymentAmount": {
                            "amount": 145.0,
                            "currency": "GBP"
                          },
                          "previousPaymentDateTime": "2016-10-05T00:00:00Z"
                        },
                        {
                          "id": "700009000000000000000038",
                          "statusDetails": {
                            "status": "ACTIVE"
                          },
                          "payeeDetails": {
                            "name": "SANTANDER MORTGAGE"
                          },
                          "reference": "40118272",
                          "previousPaymentAmount": {
                            "amount": 1000.00,
                            "currency": "GBP"
                          },
                          "previousPaymentDateTime": "2017-12-01T00:00:00Z"
                        }
                      ],
                      "links": {
                        "self": "https://api.yapily.com/accounts/700004000000000000000002/direct-debits?limit=1000"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiListResponseOfDirectDebitResponse"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Account Direct Debits",
        "tags": [
          "Financial Data"
        ]
      }
    },
    "/accounts/{accountId}/periodic-payments": {
      "get": {
        "description": "Used to get the list of periodic payments (standing orders in the UK) for an account.<br><br>Feature: `ACCOUNT_PERIODIC_PAYMENTS`",
        "operationId": "getAccountPeriodicPayments",
        "parameters": [
          {
            "description": "__Mandatory__. The account Id of the user's bank account.",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "OBIE Example Response": {
                    "description": "OBIE Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "51d039be096f492ca5184d4ea72b4caf",
                        "count": 1,
                        "pagination": {
                          "totalCount": 1,
                          "self": {
                            "limit": 1000
                          }
                        }
                      },
                      "data": [
                        {
                          "id": "95d29cb3-5ef4-4c92-885f-8ba971adc5d1",
                          "statusDetails": {
                            "status": "UNKNOWN"
                          },
                          "payeeDetails": {
                            "name": "xxxxx129",
                            "accountIdentifications": [
                              {
                                "type": "IBAN",
                                "identification": "DE16700222000072880129"
                              }
                            ]
                          },
                          "reference": "544878_60c0809a",
                          "firstPaymentAmount": {
                            "amount": 1259.00,
                            "currency": "GBP"
                          },
                          "firstPaymentDateTime": "2021-07-10T23:00:00Z",
                          "nextPaymentAmount": {
                            "amount": 1259.00,
                            "currency": "GBP"
                          },
                          "nextPaymentDateTime": "2021-07-10T23:00:00Z",
                          "finalPaymentAmount": {
                            "amount": 1259.00,
                            "currency": "GBP"
                          },
                          "finalPaymentDateTime": "2022-04-11T23:00:00Z",
                          "frequency": {
                            "frequencyType": "MONTHLY",
                            "intervalMonth": 1,
                            "executionDay": 11
                          }
                        }
                      ],
                      "links": {
                        "self": "https://api.yapily.com/accounts/700004000000000000000002/periodic-payments?limit=1000"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiListResponseOfPaymentResponse"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Account Periodic Payments",
        "tags": [
          "Financial Data"
        ]
      }
    },
    "/accounts/{accountId}/scheduled-payments": {
      "get": {
        "description": "Used to get the list of scheduled payments for an account.<br><br>Feature: `ACCOUNT_SCHEDULED_PAYMENT`",
        "operationId": "getAccountScheduledPayments",
        "parameters": [
          {
            "description": "__Mandatory__. The account Id of the user's bank account.",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "OBIE Example Response": {
                    "description": "OBIE Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "0de4ed83caf542f6bcaa30c62275191c",
                        "count": 1,
                        "pagination": {
                          "totalCount": 1,
                          "self": {
                            "limit": 1000
                          }
                        }
                      },
                      "data": [
                        {
                          "id": "6f62b428-c3a0-42eb-a838-ae41e52916e9",
                          "payeeDetails": {
                            "name": "Mr. Roberto Rastapopoulos & Ivan Sakharine & mits",
                            "accountIdentifications": [
                              {
                                "type": "ACCOUNT_NUMBER",
                                "identification": "70000002"
                              },
                              {
                                "type": "SORT_CODE",
                                "identification": "700001"
                              }
                            ]
                          },
                          "reference": "f62ee3bad94d432d9786ba038131b5d7",
                          "amountDetails": {
                            "amount": 1.00,
                            "currency": "GBP"
                          },
                          "scheduledPaymentType": "EXECUTION",
                          "scheduledPaymentDateTime": "2021-12-01T00:00:00+01:00"
                        }
                      ],
                      "links": {
                        "self": "https://api.yapily.com/accounts/700004000000000000000002/scheduled-payments?limit=1000"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiListResponseOfPaymentResponse"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Account Scheduled Payments",
        "tags": [
          "Financial Data"
        ]
      }
    },
    "/accounts/{accountId}/statements": {
      "get": {
        "description": "Used to get the list of statements for an account.<br><br>Feature: `ACCOUNT_STATEMENTS`",
        "operationId": "getStatements",
        "parameters": [
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The account Id of the user's bank account.",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). ",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "__Optional__. Sort transaction records by date ascending with 'date' or descending with '-date'. The default sort order is descending",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortEnum"
            }
          },
          {
            "description": "__Optional__. The number of transaction records to be skipped. Used primarily with paginated results.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "fd5c215acd034401a8eaa8aeec1eafc7",
                        "count": 1,
                        "pagination": {
                          "totalCount": 1,
                          "self": {
                            "limit": 1000,
                            "sort": "-date",
                            "offset": 0
                          }
                        }
                      },
                      "data": [
                        {
                          "id": "700014000000000000000002",
                          "startDateTime": "2017-08-01T00:00:00Z",
                          "endDateTime": "2017-08-31T23:59:59Z",
                          "creationDateTime": "2017-09-01T00:00:00Z"
                        }
                      ],
                      "links": {
                        "self": "https://api.yapily.com/accounts/700004000000000000000002/statements?from&before&limit=1000&sort=-date&offset=0"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiListResponseOfAccountStatement"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Account Statements",
        "tags": [
          "Financial Data"
        ]
      }
    },
    "/accounts/{accountId}/statements/{statementId}": {
      "get": {
        "description": "Used to get a statement for an account.<br><br>Feature: `ACCOUNT_STATEMENT`",
        "operationId": "getStatement",
        "parameters": [
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The account Id of the user's bank account.",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The statement Id of the statement file.",
            "in": "path",
            "name": "statementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "8bacaae3025647efa1891157993e32fb"
                      },
                      "data": {
                        "id": "700014000000000000000002",
                        "startDateTime": "2017-08-01T00:00:00Z",
                        "endDateTime": "2017-08-31T23:59:59Z",
                        "creationDateTime": "2017-09-01T00:00:00Z"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfAccountStatement"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Account Statement",
        "tags": [
          "Financial Data"
        ]
      }
    },
    "/accounts/{accountId}/statements/{statementId}/file": {
      "get": {
        "description": "Used to get the statement file for an account.<br><br>Feature: `ACCOUNT_STATEMENT_FILE`",
        "operationId": "getStatementFile",
        "parameters": [
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The account Id of the user's bank account.",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The statement Id of the statement file.",
            "in": "path",
            "name": "statementId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/pdf": {
                "schema": {
                  "type": "string",
                  "format": "binary"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Account Statement File",
        "tags": [
          "Financial Data"
        ]
      }
    },
    "/accounts/{accountId}/transactions": {
      "get": {
        "description": "Used to get the account transactions for an account<br><br>Feature: `ACCOUNT_TRANSACTIONS`",
        "operationId": "getTransactions",
        "parameters": [
          {
            "description": "__Mandatory__. The account Id of the user's bank account.",
            "in": "path",
            "name": "accountId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Can be `categories` or `merchant`. When set, will include enrichment data in the transactions returned. <br><br>Enrichment data is optional, e.g. when 'merchant' enrichment data is requested, the enrichment response will include merchant data only if it can be evaluated from the transaction.",
            "in": "query",
            "name": "with",
            "required": false,
            "schema": {
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "__Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). ",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "__Optional__. Sort transaction records by date ascending with 'date' or descending with '-date'. The default sort order is descending",
            "in": "query",
            "name": "sort",
            "required": false,
            "schema": {
              "$ref": "#/components/schemas/SortEnum"
            }
          },
          {
            "description": "__Optional__. The number of transaction records to be skipped. Used primarily with paginated results.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "__Optional__. This property is not currently in use.",
            "in": "query",
            "name": "cursor",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "488ce8243ee74a378be722ffffec8f7f",
                        "count": 1,
                        "pagination": {
                          "totalCount": 1,
                          "self": {
                            "limit": 1000,
                            "sort": "-date",
                            "offset": 0
                          }
                        }
                      },
                      "data": [
                        {
                          "id": "49d6e5c6-0130-46e3-884b-1b185432d9e0",
                          "date": "2021-05-06T17:44:34.589Z",
                          "bookingDateTime": "2021-05-06T17:44:34.589Z",
                          "valueDateTime": "2021-05-06T17:44:34.589Z",
                          "status": "BOOKED",
                          "amount": -100.23,
                          "currency": "GBP",
                          "transactionAmount": {
                            "amount": -100.23,
                            "currency": "GBP"
                          },
                          "reference": "0",
                          "description": "Debit for Payment Id: sdp-1-57379a43-c4b8-49f5-bd7c-699189ee7a60",
                          "transactionInformation": [
                            "Debit for Payment Id: sdp-1-57379a43-c4b8-49f5-bd7c-699189ee7a60"
                          ],
                          "isoBankTransactionCode": {
                            "domainCode": {
                              "code": "PMNT",
                              "name": "Payments"
                            },
                            "familyCode": {
                              "code": "ICDT",
                              "name": "Issued Credit Transfers"
                            },
                            "subFamilyCode": {
                              "code": "DMCT",
                              "name": "Domestic Credit Transfer"
                            }
                          },
                          "proprietaryBankTransactionCode": {
                            "code": "PMT",
                            "issuer": "modelo-sandbox"
                          },
                          "balance": {
                            "type": "CLOSING_AVAILABLE",
                            "balanceAmount": {
                              "amount": 426.53,
                              "currency": "GBP"
                            }
                          },
                          "enrichment": {
                            "transactionHash": {
                              "hash": "adad72d7b3069ab9e4a6cb2844e2e3e9.1"
                            }
                          }
                        }
                      ],
                      "links": {
                        "self": "https://api.yapily.com/accounts/700004000000000000000002/transactions?from&before&limit=1000&sort=-date&offset=0&cursor"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiListResponseOfTransaction"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Account Transactions",
        "tags": [
          "Financial Data"
        ]
      }
    },
    "/bulk-payment-auth-requests": {
      "post": {
        "description": "Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a bulk payment. See [Bulk Payments](https://docs.yapily.com/guides/payments/payment-execution/bulk-payments) for more information. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/redirect/) for more information about this flow.<br><br>Feature: `INITIATE_BULK_PAYMENT`",
        "operationId": "createBulkPaymentAuthorisation",
        "parameters": [
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "UK Bulk Payment Example Request": {
                  "description": "UK Bulk Payment Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "modelo-sandbox",
                    "callback": "https://display-parameters.com/",
                    "paymentRequest": {
                      "payments": [
                        {
                          "type": "DOMESTIC_PAYMENT",
                          "paymentIdempotencyId": "d78fy48uh8f9odhde68dfi38di9",
                          "reference": "payment1",
                          "amount": {
                            "amount": 2.00,
                            "currency": "GBP"
                          },
                          "payee": {
                            "name": "Jane Doe",
                            "accountIdentifications": [
                              {
                                "type": "ACCOUNT_NUMBER",
                                "identification": "12345678"
                              },
                              {
                                "type": "SORT_CODE",
                                "identification": "123456"
                              }
                            ]
                          }
                        },
                        {
                          "type": "DOMESTIC_PAYMENT",
                          "paymentIdempotencyId": "4279gdy8t63dg73gd8gx87738dg",
                          "reference": "payment2",
                          "amount": {
                            "amount": 5.00,
                            "currency": "GBP"
                          },
                          "payee": {
                            "name": "John Doe",
                            "accountIdentifications": [
                              {
                                "type": "ACCOUNT_NUMBER",
                                "identification": "87654321"
                              },
                              {
                                "type": "SORT_CODE",
                                "identification": "654321"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/BulkPaymentAuthorisationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "UK Bulk Payment Example Response": {
                    "description": "UK Bulk Payment Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "96169af01d394ad39658f17d53b49a5d"
                      },
                      "data": {
                        "id": "a2a9ec77-a479-4996-9896-4568e1968e7a",
                        "userUuid": "5350782b-60f3-489e-aae5-a24d8d679a07",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "modelo-sandbox",
                        "status": "AWAITING_AUTHORIZATION",
                        "createdAt": "2021-06-09T13:48:25.138Z",
                        "featureScope": [
                          "EXISTING_PAYMENTS_DETAILS",
                          "EXISTING_PAYMENT_INITIATION_DETAILS",
                          "CREATE_BULK_PAYMENT"
                        ],
                        "state": "80052c03007f41d589f64377eef4d620",
                        "institutionConsentId": "sdp-6-25ff5bd8-d01c-422d-aa9e-8e68808bc899",
                        "authorisationUrl": "https://ob19-auth1-ui.o3bank.co.uk/auth?client_id=e7f6b95b-5f35-419b-b301-8b08bcd946de&response_type=code+id_token&state=80052c03007f41d589f64377eef4d620&nonce=80052c03007f41d589f64377eef4d620&scope=openid+payments&redirect_uri=https%3A%2F%2Fauth.yapily.com%2F&request=eyJraWQiOiJnRTRvU3VaZDl4TVpUNXZDdTNWYy1mdktNak0iLCJhbGciOiJQUzI1NiJ9.eyJhdWQiOiJodHRwczovL29iMTktYXV0aDEtdWkubzNiYW5rLmNvLnVrIiwic2NvcGUiOiJvcGVuaWQgcGF5bWVudHMiLCJpc3MiOiJlN2Y2Yjk1Yi01ZjM1LTQxOWItYjMwMS04YjA4YmNkOTQ2ZGUiLCJjbGllbnRfaWQiOiJlN2Y2Yjk1Yi01ZjM1LTQxOWItYjMwMS04YjA4YmNkOTQ2ZGUiLCJyZXNwb25zZV90eXBlIjoiY29kZSBpZF90b2tlbiIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOi8vYXV0aC55YXBpbHkuY29tLyIsInN0YXRlIjoiODAwNTJjMDMwMDdmNDFkNTg5ZjY0Mzc3ZWVmNGQ2MjAiLCJjbGFpbXMiOnsiaWRfdG9rZW4iOnsiYWNyIjp7InZhbHVlIjoidXJuOm9wZW5iYW5raW5nOnBzZDI6c2NhIiwiZXNzZW50aWFsIjp0cnVlfSwib3BlbmJhbmtpbmdfaW50ZW50X2lkIjp7InZhbHVlIjoic2RwLTYtMjVmZjViZDgtZDAxYy00MjJkLWFhOWUtOGU2ODgwOGJjODk5IiwiZXNzZW50aWFsIjp0cnVlfX0sInVzZXJpbmZvIjp7Im9wZW5iYW5raW5nX2ludGVudF9pZCI6eyJ2YWx1ZSI6InNkcC02LTI1ZmY1YmQ4LWQwMWMtNDIyZC1hYTllLThlNjg4MDhiYzg5OSIsImVzc2VudGlhbCI6dHJ1ZX19fSwibm9uY2UiOiI4MDA1MmMwMzAwN2Y0MWQ1ODlmNjQzNzdlZWY0ZDYyMCIsImp0aSI6ImUxYjZmMWM4LTQ1ZTktNGM0NS05NGE0LWExMTY1Nzk2NjZiNiIsImlhdCI6MTYyMzI0NjUwNSwiZXhwIjoxNjIzMjQ4MzA1fQ.C5YkClHiDOWl1CKnmEY0gM_JizUuELp2-k7sDjsWV5T-mgTWviO-jM7iVfCf4MsU6batLSBmeUFLco1b3S8PTQkAzwM3laHIgbfDAb_6bYkSBTbPriyzKcC8xAwhX3VdvWtb9qqdrn9zXSmIIITBhJdMzk1cgIjyETD7WNPln839eGP1-w8iB8yDOJOkYGRHJ850mQY-lk61GegmKs5kaxtYPIhrG2gygIi3JsN-uQJ6YOl2-5pylTEcJbuwhFiyeePdqHZdabqW2BSA6lDKQbMV_Zow_zhSWoFFv6RZdXCQpt4TBRj1W7tzZQKin-MC-TpzaF1q07RpSy0NtlN85w",
                        "qrCodeUrl": "https://images.yapily.com/image/2bbb79b8-2c4a-4c8e-9132-0636879437da/1623246505?size=0"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfPaymentAuthorisationRequestResponse"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Create Bulk Payment Authorisation",
        "tags": [
          "Authorisations"
        ]
      }
    },
    "/bulk-payments": {
      "post": {
        "description": "Used to initiate a bulk payment after obtaining the user's authorisation. <br><br>Feature: `CREATE_BULK_PAYMENT`",
        "operationId": "createBulkPayment",
        "parameters": [
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "UK Bulk Payment Example Request": {
                  "description": "UK Bulk Payment Example Request",
                  "value": {
                    "payments": [
                      {
                        "type": "DOMESTIC_PAYMENT",
                        "paymentIdempotencyId": "d78fy48uh8f9odhde68dfi38di9",
                        "reference": "payment1",
                        "amount": {
                          "amount": 2.00,
                          "currency": "GBP"
                        },
                        "payee": {
                          "name": "Jane Doe",
                          "accountIdentifications": [
                            {
                              "type": "ACCOUNT_NUMBER",
                              "identification": "12345678"
                            },
                            {
                              "type": "SORT_CODE",
                              "identification": "123456"
                            }
                          ]
                        }
                      },
                      {
                        "type": "DOMESTIC_PAYMENT",
                        "paymentIdempotencyId": "4279gdy8t63dg73gd8gx87738dg",
                        "reference": "payment2",
                        "amount": {
                          "amount": 5.00,
                          "currency": "GBP"
                        },
                        "payee": {
                          "name": "John Doe",
                          "accountIdentifications": [
                            {
                              "type": "ACCOUNT_NUMBER",
                              "identification": "87654321"
                            },
                            {
                              "type": "SORT_CODE",
                              "identification": "654321"
                            }
                          ]
                        }
                      }
                    ]
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/BulkPaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "UK Bulk Payment Example Response": {
                    "description": "UK Bulk Payment Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "0cda48c70f3941148bbee775a65fa3d0"
                      },
                      "data": {
                        "id": "pv3-a1e2ecb0-270c-42e2-8ba5-005261b629d2",
                        "institutionConsentId": "sdp-6-b06f9a82-c641-4aba-b76d-43e6bc052f75",
                        "status": "COMPLETED",
                        "statusDetails": {
                          "status": "COMPLETED",
                          "statusUpdateDate": "2021-06-09T13:53:28.67Z"
                        },
                        "createdAt": "2021-06-09T13:53:28.67Z",
                        "bulkAmountSum": 7
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfPaymentResponse"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Create Bulk Payment",
        "tags": [
          "Payments"
        ]
      }
    },
    "/categories/{country}": {
      "get": {
        "description": "Used to retrieve the list of categories returned by the Yapily Categorisation engine for a given locale. <br><br>See [Data Enrichment](https://docs.yapily.com/guides/financial-data/data-enrichment) for more information.",
        "operationId": "getCategories",
        "parameters": [
          {
            "description": "__Mandatory__. The 2 letter country code e.g. 'GB'.",
            "in": "path",
            "name": "country",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "a5b0fc4b8b8a4b7085f4412b2b64e969",
                        "count": 21
                      },
                      "data": [
                        {
                          "id": "06d10bcd-dbcc-4a61-b5a1-c119adc16adf",
                          "label": "INCOME",
                          "country": "GB",
                          "subcategories": []
                        },
                        {
                          "id": "1051a1ff-5552-4b53-ba43-eeeac96d710f",
                          "label": "INCOME_OTHER",
                          "country": "GB",
                          "subcategories": []
                        },
                        {
                          "id": "2f527678-a698-4c00-9880-3063b39f71df",
                          "label": "INCOME_REFUNDS",
                          "country": "GB",
                          "subcategories": []
                        },
                        {
                          "id": "3954ed5c-1663-4356-869e-241f305c8b4b",
                          "label": "BILLS",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "03e037d4-c950-4540-a298-36cce7eb9ce9",
                              "label": "INTERNET / TV"
                            },
                            {
                              "id": "05ed46b2-dfa4-4cde-8900-692a899e1290",
                              "label": "MOBILE PHONE"
                            },
                            {
                              "id": "06df5c74-3783-48d4-9825-f508a237d60f",
                              "label": "SUBSCRIPTION"
                            },
                            {
                              "id": "11e189ab-3794-478b-8a30-1c1c7aae7af1",
                              "label": "TV LICENCE"
                            },
                            {
                              "id": "1238e562-2a7b-4ef1-8e41-037491cefd53",
                              "label": "UTILITY BILL"
                            },
                            {
                              "id": "129c7a08-2125-4b0f-87bb-253fca906eb7",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "5de14494-fec8-44c2-af9c-91656d2e8d1b",
                          "label": "CHARITY AND GIFTS",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "1655bc45-de79-4fd2-9b45-8bd9271a2520",
                              "label": "DONATIONS"
                            },
                            {
                              "id": "1b9e1a46-5229-4488-a68c-19d7cb450c79",
                              "label": "GIFTS"
                            },
                            {
                              "id": "1d09a62b-1f9c-418d-9f37-9ee5003d5abc",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "6edef913-2c1e-4935-9f23-4a71fe92124c",
                          "label": "EATING OUT",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "1e13a0f5-6892-4436-ba71-f11cd1a0b8fe",
                              "label": "COFFEE"
                            },
                            {
                              "id": "1eb03b3e-e9ab-4d54-ae9a-e63778390794",
                              "label": "DRINKS"
                            },
                            {
                              "id": "253e0e15-f260-44ee-a1cf-ac42afbc8a48",
                              "label": "FAST FOOD"
                            },
                            {
                              "id": "25a39d3e-d2c5-47e5-9874-57d9d4edfaaa",
                              "label": "RESTAURANT"
                            },
                            {
                              "id": "26594166-4e32-4a9b-8cbf-ea7ab86c19e6",
                              "label": "TAKEAWAY / DELIVERY"
                            },
                            {
                              "id": "36949186-bb90-427a-840b-8d9c9ff5ca35",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "705dddcc-03f8-4a27-ac8b-a2256f950239",
                          "label": "ENTERTAINMENT",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "380694b8-efc4-4443-9c49-df81229f3d69",
                              "label": "ART / MUSEUM"
                            },
                            {
                              "id": "380c0b10-1afd-4f4f-8fd5-7cac3392fb9a",
                              "label": "CINEMA"
                            },
                            {
                              "id": "397b698d-4f46-4356-a283-2af934bf51a3",
                              "label": "LIVE MUSIC"
                            },
                            {
                              "id": "39aed540-1702-4e50-9109-5808e5636146",
                              "label": "LIVE SPORT"
                            },
                            {
                              "id": "44a99d0c-2718-4c95-8c2c-13c9802e2d20",
                              "label": "THEATRE"
                            },
                            {
                              "id": "4a419ef8-f953-4866-881e-0ad61adf110c",
                              "label": "NIGHTCLUB"
                            },
                            {
                              "id": "4c483465-980d-4274-81d5-32e2d61e8aed",
                              "label": "ONLINE GAMBLING"
                            },
                            {
                              "id": "50bbec77-b23d-4ce2-bedb-a0e1ca2e34f4",
                              "label": "LOTTERY"
                            },
                            {
                              "id": "5a3d65f9-a8ae-4eb8-bae0-973c7c4de372",
                              "label": "BETTING SHOP"
                            },
                            {
                              "id": "5b8493cb-09f6-457a-a642-9a309ee1d424",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "75cdc4b8-dc29-409f-8f9b-a99341ea2e39",
                          "label": "INVESTMENT AND SAVINGS",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "5c8c11a1-ad38-4101-898e-9ceb1ee90d48",
                              "label": "CREDIT CARD PAYMENT"
                            },
                            {
                              "id": "5f93b21e-7e63-4652-91a9-610026252b29",
                              "label": "INVESTMENTS"
                            },
                            {
                              "id": "5fb0ba5d-71eb-42db-bd51-63637ef356df",
                              "label": "SAVINGS"
                            },
                            {
                              "id": "5fe79b4e-8ab3-4cb4-b51e-bc5eb3263a0c",
                              "label": "PENSION"
                            },
                            {
                              "id": "61eaee8c-eea4-4d9f-93f1-74f22f38b6ea",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "7bc5d291-8af1-4ad0-bf29-302f4e1c6995",
                          "label": "GENERAL",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "656abd3b-8a71-455f-ab28-6f4e3262da2c",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "84c9be40-4114-43ce-9e06-5f93c2719693",
                          "label": "GROCERIES",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "69f5d7b7-f1e6-498a-9318-23ba5916c7ef",
                              "label": "SUPERMARKET"
                            },
                            {
                              "id": "6d4395bb-466c-419a-80b5-7428cec4f88f",
                              "label": "ONLINE GROCERIES"
                            },
                            {
                              "id": "74a0185b-632d-4edd-832f-d32582b15e8d",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "8abdddb5-92c4-42e1-b380-12537f84b40e",
                          "label": "PERSONAL CARE",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "7702e7ec-32b9-4ce6-879e-20ac84e52293",
                              "label": "BEAUTY PRODUCTS"
                            },
                            {
                              "id": "7affed3f-f9d0-4946-b2c0-70c79b0334ac",
                              "label": "DOCTOR"
                            },
                            {
                              "id": "7f84092a-c67d-4cb3-99af-c7a4be5109db",
                              "label": "GYM / EXERCISE"
                            },
                            {
                              "id": "7fcaceb6-9c4e-4395-b216-5ae41b3991d2",
                              "label": "HAIRDRESSER"
                            },
                            {
                              "id": "83f7fb77-8b56-4f47-b531-6d06e245597d",
                              "label": "PHARMACY"
                            },
                            {
                              "id": "8546fdde-8b73-4a58-9aa0-4781e4ca6340",
                              "label": "SPA / BEAUTY TREATMENT"
                            },
                            {
                              "id": "85936cb0-aa0c-4c93-b0bc-cbf1672bd675",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "8b37bbd3-76e9-4937-a7fc-e9cf7d8232a3",
                          "label": "HOME",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "899cbae5-c556-4e2d-8cdd-9fef7fd4d820",
                              "label": "RENT"
                            },
                            {
                              "id": "8af1b65f-62f2-4b56-a348-97e7390d2f62",
                              "label": "MORTGAGE"
                            },
                            {
                              "id": "8cf40b23-e7a4-4ae3-88f0-4ab3b35a679b",
                              "label": "SERVICE CHARGE"
                            },
                            {
                              "id": "8dfb3077-3e29-4a3b-b41c-964bf368071b",
                              "label": "GARDEN"
                            },
                            {
                              "id": "922cd0ca-bd5f-44ab-aa40-6536f9d2abe5",
                              "label": "COUNCIL TAX"
                            },
                            {
                              "id": "9d3ca620-4ae3-4296-8864-c0962b2f4539",
                              "label": "HOME IMPROVEMENT"
                            },
                            {
                              "id": "a1bfe200-c1d7-4c0c-9d60-d0b83cd71f74",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "92aef8f2-18f8-464f-8915-e44dc5b97731",
                          "label": "INSURANCE",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "a72f6cbf-d894-4bfa-ac87-39f85012a7f8",
                              "label": "HOME INSURANCE"
                            },
                            {
                              "id": "a7bc0f36-ee80-496c-a1c1-ac49c51c6d07",
                              "label": "MOTOR INSURANCE"
                            },
                            {
                              "id": "a8a505af-7e73-4d6f-a146-51d2eb5d4db8",
                              "label": "TRAVEL INSURANCE"
                            },
                            {
                              "id": "a9e1b431-6d75-41ac-9a23-44fb25e64b1a",
                              "label": "HEALTH INSURANCE"
                            },
                            {
                              "id": "aa420049-2d7a-4f11-94d5-c76e45329a47",
                              "label": "LIFE INSURANCE"
                            },
                            {
                              "id": "ab441944-859a-44db-93fc-0800266dd4f6",
                              "label": "PET INSURANCE"
                            },
                            {
                              "id": "ab95ea13-8d0c-497d-8d8b-e06cde0eaf97",
                              "label": "PHONE / GADGET INSURANCE"
                            },
                            {
                              "id": "aba53905-b630-4cf3-b1f8-698d124197a6",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "b0b56616-8cf6-4653-8512-d5eefe8400fe",
                          "label": "OTHER",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "ad5e46b2-f9ad-4ef2-96d7-a2817073beec",
                              "label": "EDUCATION"
                            },
                            {
                              "id": "b18ec1a3-171c-405a-bd4f-c9fddcd6c594",
                              "label": "ATM WITHDRAWAL"
                            },
                            {
                              "id": "b1d4abd8-1c2f-412a-9916-4167cc7d58d8",
                              "label": "CREDIT CARD PAYMENT"
                            },
                            {
                              "id": "b4cd0587-1d2f-4378-a31c-8ddc0ce0dc03",
                              "label": "TRANSFER"
                            },
                            {
                              "id": "b667ea18-8679-4608-91b6-cbd4488d3802",
                              "label": "CARD TOPUP"
                            },
                            {
                              "id": "b6c611d7-d8cc-4d16-8e42-16cfa6dfd56e",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "b1f468dd-8f0c-4bbb-a720-f6c117187b15",
                          "label": "SHOPPING",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "b7181636-097c-4362-9f71-9da1559685f2",
                              "label": "BOOKS"
                            },
                            {
                              "id": "becc8b91-f594-490b-aecf-50e12fb6ca84",
                              "label": "CLOTHING"
                            },
                            {
                              "id": "bf41624e-5790-43d9-966d-25878cd79881",
                              "label": "ELECTRONICS"
                            },
                            {
                              "id": "c8bab464-ade8-4ec2-9d83-d42a2aa7d088",
                              "label": "GAMES"
                            },
                            {
                              "id": "c99e826c-302c-4abf-85b5-557d65184f63",
                              "label": "HOBBIES"
                            },
                            {
                              "id": "cb09c4e8-00d2-41d7-a581-f73d0e3b0cb2",
                              "label": "MUSIC"
                            },
                            {
                              "id": "cbe0734a-c10b-4901-bf7c-be4df9b1ed42",
                              "label": "PETS"
                            },
                            {
                              "id": "d13b7872-0418-426c-9054-315a41ddcd21",
                              "label": "SOFTWARE"
                            },
                            {
                              "id": "d17705fc-1a34-42a2-bc77-0511635f0d21",
                              "label": "SPORTING ITEMS"
                            },
                            {
                              "id": "d2668855-296d-450f-b309-3f28c4f3fa5f",
                              "label": "HOUSE ITEMS"
                            },
                            {
                              "id": "d4cf6c32-d94f-4488-9e74-46734cb34cc2",
                              "label": "FILM / DVD"
                            },
                            {
                              "id": "d837fb3f-f614-410b-b9d9-3e89e92e683a",
                              "label": "STATIONARY"
                            },
                            {
                              "id": "d8d74d91-7810-4995-8337-72c39dff05a2",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "b831661f-c8af-4eec-91d8-b09b53616394",
                          "label": "TRANSPORT",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "d9da6e16-7a9f-41ee-b727-a7d39f0e4c2c",
                              "label": "PUBLIC TRANSPORT"
                            },
                            {
                              "id": "d9e7f133-d0d7-471a-be28-da3f61d453c2",
                              "label": "PETROL / FUEL"
                            },
                            {
                              "id": "dbb9104d-e0e4-4e25-838a-083dc751c665",
                              "label": "PARKING"
                            },
                            {
                              "id": "dcab2001-efc7-42be-a381-c7169ff806e6",
                              "label": "TAXI"
                            },
                            {
                              "id": "dee109d5-0347-404e-81f2-cc736949e62d",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "baf7ee41-0a29-49f7-b5fd-af602935c2fe",
                          "label": "TRAVEL AND HOLIDAY",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "e1cc65b3-30ba-47fc-90aa-c7a1fb93ebdf",
                              "label": "AIR TRAVEL"
                            },
                            {
                              "id": "e44e3d55-a843-4660-940b-b2756198992e",
                              "label": "CAR RENTAL"
                            },
                            {
                              "id": "e76ee6e8-1cef-4986-b229-ef96af9f473d",
                              "label": "HOTELS"
                            },
                            {
                              "id": "ed57cd0b-2abc-4af9-b478-75bbee149a5a",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "bc4de368-67f2-4bd6-ae09-ebfa1164e259",
                          "label": "FEES AND CHARGES",
                          "country": "GB",
                          "subcategories": [
                            {
                              "id": "ed8d73e4-79ea-42a0-aab3-0c2d40594ba8",
                              "label": "LATE FEE"
                            },
                            {
                              "id": "ee16362b-f67c-4f1a-8e6a-f2ed6f325df3",
                              "label": "ATM FEE"
                            },
                            {
                              "id": "ef9652f1-67cf-40eb-8ef5-ecb96419c60c",
                              "label": "SERVICE FEE"
                            },
                            {
                              "id": "f0d996d4-be7e-48f3-bb3b-48d10c287b75",
                              "label": "OVERDRAFT CHARGE"
                            },
                            {
                              "id": "f16c80bb-4e77-43de-bb8e-3391d8c8d2f0",
                              "label": "FOREIGN CURRENCY CHARGE"
                            },
                            {
                              "id": "f2a19ee6-d181-4454-98e4-1f8c5d83be82",
                              "label": "OTHER"
                            }
                          ]
                        },
                        {
                          "id": "c17a6985-a47c-463c-bbd0-934a156224e3",
                          "label": "FINANCES",
                          "country": "GB",
                          "subcategories": []
                        },
                        {
                          "id": "cdc636d5-2dc7-444a-a53c-edd81f449cdc",
                          "label": "TRANSFERS",
                          "country": "GB",
                          "subcategories": []
                        },
                        {
                          "id": "2a497caa-eea6-4e99-b460-57a26fffd0d7",
                          "label": "UNKNOWN",
                          "country": "GB",
                          "subcategories": []
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiListResponseOfCategory"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Categories",
        "tags": [
          "Financial Data"
        ]
      }
    },
    "/consent-auth-code": {
      "post": {
        "description": "Used to obtain a Yapily Consent object containing the `consentToken` once the user has authenticated and you have an OAuth2 authorisation code `auth-code` and state `auth-state`.",
        "operationId": "createConsentWithCode",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ConsentAuthCodeRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "id": "56a42244-414a-4b52-8c4f-4ad2a50e82fe",
                      "userUuid": "ca412fdf-5a30-43a2-88b7-5964a24a8e55",
                      "applicationUserId": "john.doe@company.com",
                      "institutionId": "modelo-sandbox",
                      "status": "AUTHORIZED",
                      "createdAt": "2021-06-08T10:59:35.138Z",
                      "featureScope": [
                        "ACCOUNT_BENEFICIARIES",
                        "ACCOUNT_STATEMENT_FILE",
                        "ACCOUNTS",
                        "ACCOUNT_PERIODIC_PAYMENTS",
                        "ACCOUNT_TRANSACTIONS",
                        "ACCOUNT",
                        "ACCOUNT_STATEMENTS",
                        "ACCOUNT_SCHEDULED_PAYMENTS",
                        "IDENTITY",
                        "ACCOUNT_DIRECT_DEBITS",
                        "ACCOUNT_STATEMENT",
                        "ACCOUNT_BALANCES",
                        "ACCOUNT_TRANSACTIONS_WITH_MERCHANT"
                      ],
                      "consentToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJJTlNUSVRVVElPTiI6Im1vZGVsby1zYW5kYm94IiwiQ09OU0VOVCI6IjU2YTQyMjQ0LTQxNGEtNGI1Mi04YzRmLTRhZDJhNTBlODJmZSIsIkFQUExJQ0FUSU9OX1VTRVJfSUQiOiJtb2ZlLTIiLCJVU0VSIjoiY2E0MTJmZGYtNWEzMC00M2EyLTg4YjctNTk2NGEyNGE4ZTU1In0.gorwpnUjSr5dzQJLR32M2geWOj7yK9xMsZmq27ssY9xP_xGmWfUL_aqVHYyQ4r5KWw6Xb6RjvO839st8chJLtg",
                      "state": "a09f8ff9c1284444aa635267e05f76e1",
                      "authorizedAt": "2021-06-08T10:59:53.288Z",
                      "institutionConsentId": "aac-605d48f2-2a0e-4594-81a9-996524fa3b2a"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Consent"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Exchange OAuth2 Code",
        "tags": [
          "Consents"
        ]
      }
    },
    "/consent-one-time-token": {
      "post": {
        "description": "Exchange a One-time-token for the consent token",
        "operationId": "getConsentBySingleAccessConsent",
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/OneTimeTokenRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "id": "56a42244-414a-4b52-8c4f-4ad2a50e82fe",
                      "userUuid": "ca412fdf-5a30-43a2-88b7-5964a24a8e55",
                      "applicationUserId": "john.doe@company.com",
                      "institutionId": "modelo-sandbox",
                      "status": "AUTHORIZED",
                      "createdAt": "2021-06-08T10:59:35.138Z",
                      "featureScope": [
                        "ACCOUNT_BENEFICIARIES",
                        "ACCOUNT_STATEMENT_FILE",
                        "ACCOUNTS",
                        "ACCOUNT_PERIODIC_PAYMENTS",
                        "ACCOUNT_TRANSACTIONS",
                        "ACCOUNT",
                        "ACCOUNT_STATEMENTS",
                        "ACCOUNT_SCHEDULED_PAYMENTS",
                        "IDENTITY",
                        "ACCOUNT_DIRECT_DEBITS",
                        "ACCOUNT_STATEMENT",
                        "ACCOUNT_BALANCES",
                        "ACCOUNT_TRANSACTIONS_WITH_MERCHANT"
                      ],
                      "consentToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJJTlNUSVRVVElPTiI6Im1vZGVsby1zYW5kYm94IiwiQ09OU0VOVCI6IjU2YTQyMjQ0LTQxNGEtNGI1Mi04YzRmLTRhZDJhNTBlODJmZSIsIkFQUExJQ0FUSU9OX1VTRVJfSUQiOiJtb2ZlLTIiLCJVU0VSIjoiY2E0MTJmZGYtNWEzMC00M2EyLTg4YjctNTk2NGEyNGE4ZTU1In0.gorwpnUjSr5dzQJLR32M2geWOj7yK9xMsZmq27ssY9xP_xGmWfUL_aqVHYyQ4r5KWw6Xb6RjvO839st8chJLtg",
                      "state": "a09f8ff9c1284444aa635267e05f76e1",
                      "authorizedAt": "2021-06-08T10:59:53.288Z",
                      "institutionConsentId": "aac-605d48f2-2a0e-4594-81a9-996524fa3b2a"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Consent"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Exchange One Time Token",
        "tags": [
          "Consents"
        ]
      }
    },
    "/consents": {
      "get": {
        "description": "Used to retrieve all the consents created for each user within an application",
        "operationId": "getConsents",
        "parameters": [
          {
            "description": "__Optional__. Filter records based on the list of `applicationUserId` users provided.",
            "in": "query",
            "name": "filter[applicationUserId]",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "__Optional__. Filter records based on the list of `userUuid` users provided.",
            "in": "query",
            "name": "filter[userUuid]",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string",
                "format": "uuid"
              }
            }
          },
          {
            "description": "__Optional__. Filter records based on the list of `Institution` provided.",
            "in": "query",
            "name": "filter[institution]",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "__Optional__. Filter records based on the list of `Consent` [statuses](https://docs.yapily.com/api/#tocS_AuthorisationStatus).",
            "in": "query",
            "name": "filter[status]",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          },
          {
            "description": "__Optional__. Returned transactions will be on or after this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ). ",
            "in": "query",
            "name": "from",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Returned transactions will be on or before this date (yyyy-MM-dd'T'HH:mm:ss.SSSZ).",
            "in": "query",
            "name": "before",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. The maximum number of transaction records to be returned. Must be between 0 and 1000.",
            "in": "query",
            "name": "limit",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32"
            }
          },
          {
            "description": "__Optional__. The number of transaction records to be skipped. Used primarily with paginated results.",
            "in": "query",
            "name": "offset",
            "required": false,
            "schema": {
              "type": "integer",
              "format": "int32",
              "default": 0
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "d7b537b108934105a522dc7b4522380b",
                        "count": 1,
                        "pagination": {
                          "totalCount": 1,
                          "self": {
                            "sort": "-date",
                            "offset": 0
                          }
                        }
                      },
                      "data": [
                        {
                          "id": "56a42244-414a-4b52-8c4f-4ad2a50e82fe",
                          "userUuid": "ca412fdf-5a30-43a2-88b7-5964a24a8e55",
                          "applicationUserId": "john.doe@company.com",
                          "institutionId": "modelo-sandbox",
                          "status": "AUTHORIZED",
                          "createdAt": "2021-06-08T10:59:35.138Z",
                          "featureScope": [
                            "ACCOUNT_BENEFICIARIES",
                            "ACCOUNT_STATEMENT_FILE",
                            "ACCOUNTS",
                            "ACCOUNT_PERIODIC_PAYMENTS",
                            "ACCOUNT_TRANSACTIONS",
                            "ACCOUNT",
                            "ACCOUNT_STATEMENTS",
                            "ACCOUNT_SCHEDULED_PAYMENTS",
                            "IDENTITY",
                            "ACCOUNT_DIRECT_DEBITS",
                            "ACCOUNT_STATEMENT",
                            "ACCOUNT_BALANCES",
                            "ACCOUNT_TRANSACTIONS_WITH_MERCHANT"
                          ],
                          "consentToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJJTlNUSVRVVElPTiI6Im1vZGVsby1zYW5kYm94IiwiQ09OU0VOVCI6IjU2YTQyMjQ0LTQxNGEtNGI1Mi04YzRmLTRhZDJhNTBlODJmZSIsIkFQUExJQ0FUSU9OX1VTRVJfSUQiOiJtb2ZlLTIiLCJVU0VSIjoiY2E0MTJmZGYtNWEzMC00M2EyLTg4YjctNTk2NGEyNGE4ZTU1In0.gorwpnUjSr5dzQJLR32M2geWOj7yK9xMsZmq27ssY9xP_xGmWfUL_aqVHYyQ4r5KWw6Xb6RjvO839st8chJLtg",
                          "state": "a09f8ff9c1284444aa635267e05f76e1",
                          "authorizedAt": "2021-06-08T10:59:53.288Z",
                          "institutionConsentId": "aac-605d48f2-2a0e-4594-81a9-996524fa3b2a"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiListResponseOfConsent"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Consents",
        "tags": [
          "Consents"
        ]
      }
    },
    "/consents/{consentId}": {
      "delete": {
        "description": "Delete a consent using the consent Id",
        "operationId": "delete",
        "parameters": [
          {
            "description": "__Mandatory__. The consent Id of the `Consent` to update.",
            "in": "path",
            "name": "consentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "description": "__Optional__. Whether to force the deletion.",
            "in": "query",
            "name": "forceDelete",
            "required": false,
            "schema": {
              "type": "boolean",
              "default": true
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "9aacaccc6dbf4a86960c9541969087a0"
                      },
                      "data": {
                        "id": "56a42244-414a-4b52-8c4f-4ad2a50e82fe",
                        "deleteStatus": "SUCCESS",
                        "institutionId": "modelo-sandbox",
                        "institutionConsentId": "aac-605d48f2-2a0e-4594-81a9-996524fa3b2a",
                        "creationDate": "2021-06-08T10:59:35.138Z"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfConsentDeleteResponse"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Delete Consent",
        "tags": [
          "Consents"
        ]
      },
      "get": {
        "description": "Get consent using the consent Id",
        "operationId": "getConsentById",
        "parameters": [
          {
            "description": "__Mandatory__. The consent Id of the `Consent` to update.",
            "in": "path",
            "name": "consentId",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "679e7bb6cd45416a9a9a8d004c5315da"
                      },
                      "data": {
                        "id": "56a42244-414a-4b52-8c4f-4ad2a50e82fe",
                        "userUuid": "ca412fdf-5a30-43a2-88b7-5964a24a8e55",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "modelo-sandbox",
                        "status": "AUTHORIZED",
                        "createdAt": "2021-06-08T10:59:35.138Z",
                        "featureScope": [
                          "ACCOUNT_BENEFICIARIES",
                          "ACCOUNT_STATEMENT_FILE",
                          "ACCOUNTS",
                          "ACCOUNT_PERIODIC_PAYMENTS",
                          "ACCOUNT_TRANSACTIONS",
                          "ACCOUNT",
                          "ACCOUNT_STATEMENTS",
                          "ACCOUNT_SCHEDULED_PAYMENTS",
                          "IDENTITY",
                          "ACCOUNT_DIRECT_DEBITS",
                          "ACCOUNT_STATEMENT",
                          "ACCOUNT_BALANCES",
                          "ACCOUNT_TRANSACTIONS_WITH_MERCHANT"
                        ],
                        "consentToken": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJJTlNUSVRVVElPTiI6Im1vZGVsby1zYW5kYm94IiwiQ09OU0VOVCI6IjU2YTQyMjQ0LTQxNGEtNGI1Mi04YzRmLTRhZDJhNTBlODJmZSIsIkFQUExJQ0FUSU9OX1VTRVJfSUQiOiJtb2ZlLTIiLCJVU0VSIjoiY2E0MTJmZGYtNWEzMC00M2EyLTg4YjctNTk2NGEyNGE4ZTU1In0.gorwpnUjSr5dzQJLR32M2geWOj7yK9xMsZmq27ssY9xP_xGmWfUL_aqVHYyQ4r5KWw6Xb6RjvO839st8chJLtg",
                        "state": "a09f8ff9c1284444aa635267e05f76e1",
                        "authorizedAt": "2021-06-08T10:59:53.288Z",
                        "institutionConsentId": "aac-605d48f2-2a0e-4594-81a9-996524fa3b2a"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfConsent"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Consent",
        "tags": [
          "Consents"
        ]
      }
    },
    "/embedded-account-auth-requests": {
      "post": {
        "description": "Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_ACCOUNT_REQUEST` feature in order to obtain the the user's authorisation to access their account information. <br><br>See [Embedded Account Flows](https://docs.yapily.com/guides/financial-data/account-authorisation-flows/embedded/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`",
        "operationId": "initiateEmbeddedAccountRequest",
        "parameters": [
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "Berlin Group Example Request": {
                  "description": "Berlin Group Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "fiducia-sandbox",
                    "userCredentials": {
                      "id": "6154057725",
                      "password": "PISPWD12"
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/AccountEmbeddedAuthorisationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Berlin Group (Multiple SCA Methods) Example Response": {
                    "description": "Berlin Group (Multiple SCA Methods) Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "a9d8d8c5e6a84b00b8510d90c28cbbc6"
                      },
                      "data": {
                        "id": "149da283-2958-4128-9d72-e3a02e8bb83d",
                        "userUuid": "6b082877-b137-4743-bba3-07b6a8148b42",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "fiducia-sandbox",
                        "status": "AWAITING_SCA_METHOD",
                        "createdAt": "2021-06-09T11:47:24.513Z",
                        "expiresAt": "2021-09-07T00:00:00Z",
                        "timeToExpire": "P89DT12H12M35.472S",
                        "featureScope": [
                          "ACCOUNT_TRANSACTIONS",
                          "ACCOUNTS",
                          "ACCOUNT",
                          "ACCOUNT_BALANCES"
                        ],
                        "state": "c99f35c118194737b83487a0e6a48ed9",
                        "institutionConsentId": "4514274319060120226PSDLT-BL-LB002045CO9545RW",
                        "scaMethods": [
                          {
                            "id": "962",
                            "type": "CHIP_OTP",
                            "description": "SmartTAN plus HHD 1.4"
                          },
                          {
                            "id": "952",
                            "type": "CHIP_OTP",
                            "description": "SmartTAN optic"
                          },
                          {
                            "id": "972",
                            "type": "CHIP_OTP",
                            "description": "SmartTAN optic/USB HHD 1.4"
                          },
                          {
                            "id": "982",
                            "type": "PHOTO_OTP",
                            "description": "Smart-TAN photo"
                          },
                          {
                            "id": "932",
                            "type": "CHIP_OTP",
                            "description": "SmartTAN plus"
                          },
                          {
                            "id": "944",
                            "type": "PUSH_OTP",
                            "description": "SecureSIGN"
                          },
                          {
                            "id": "942",
                            "type": "SMS_OTP",
                            "description": "mobile TAN"
                          }
                        ]
                      }
                    }
                  },
                  "Berlin Group (Single SCA Method) Example Response": {
                    "description": "Berlin Group (Single SCA Method) Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "1565f7e13a0b4bf6b312cf8cc5747c7c"
                      },
                      "data": {
                        "id": "66c8c0f2-1678-4404-a68f-2236a1afcdad",
                        "userUuid": "6b082877-b137-4743-bba3-07b6a8148b42",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "fiducia-sandbox",
                        "status": "AWAITING_SCA_CODE",
                        "createdAt": "2021-06-09T11:49:18.815Z",
                        "expiresAt": "2021-09-07T00:00:00Z",
                        "timeToExpire": "P89DT12H10M41.167S",
                        "featureScope": [
                          "ACCOUNT_TRANSACTIONS",
                          "ACCOUNTS",
                          "ACCOUNT",
                          "ACCOUNT_BALANCES"
                        ],
                        "state": "3fb4024282d0432cb710094c4c723ae5",
                        "institutionConsentId": "1448194319060120228PSDLT-BL-LB002045CO9545RW",
                        "scaMethods": [
                          {
                            "id": "944",
                            "type": "PUSH_OTP",
                            "description": "SecureSIGN"
                          }
                        ],
                        "selectedScaMethod": {
                          "id": "944",
                          "type": "PUSH_OTP",
                          "description": "SecureSIGN"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfAuthorisationEmbeddedRequestResponse"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Create Embedded Account Authorisation",
        "tags": [
          "Authorisations"
        ]
      }
    },
    "/embedded-account-auth-requests/{consentId}": {
      "put": {
        "description": "Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to access the user's financial data. <br><br>See [Embedded Account Flows](https://docs.yapily.com/guides/financial-data/account-authorisation-flows/embedded/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_ACCOUNT_REQUEST`",
        "operationId": "updateEmbeddedAccountRequest",
        "parameters": [
          {
            "description": "__Mandatory__. The consent Id of the `Consent` to update.",
            "in": "path",
            "name": "consentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "Berlin Group (SCA Code) Example Request": {
                  "description": "Berlin Group (SCA Code) Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "fiducia-sandbox",
                    "scaCode": "6154057725"
                  }
                },
                "Berlin Group (Selected SCA Method) Example Request": {
                  "description": "Berlin Group (Selected SCA Method) Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "fiducia-sandbox",
                    "selectedScaMethod": {
                      "id": "944",
                      "type": "PUSH_OTP",
                      "description": "SecureSIGN"
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/AccountEmbeddedAuthorisationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Berlin Group (SCA Code) Example Response": {
                    "description": "Berlin Group (SCA Code) Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "0ad7c46c4e4445bab3a0d4ccae25556b"
                      },
                      "data": {
                        "id": "66c8c0f2-1678-4404-a68f-2236a1afcdad",
                        "userUuid": "6b082877-b137-4743-bba3-07b6a8148b42",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "fiducia-sandbox",
                        "status": "AUTHORIZED",
                        "createdAt": "2021-06-09T11:49:18.815Z",
                        "featureScope": [
                          "ACCOUNT_TRANSACTIONS",
                          "ACCOUNTS",
                          "ACCOUNT",
                          "ACCOUNT_BALANCES"
                        ],
                        "state": "3fb4024282d0432cb710094c4c723ae5",
                        "authorizedAt": "2021-06-09T11:51:14.140Z",
                        "institutionConsentId": "1448194319060120228PSDLT-BL-LB002045CO9545RW"
                      }
                    }
                  },
                  "Berlin Group (Selected SCA Method) Example Response": {
                    "description": "Berlin Group (Selected SCA Method) Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "eaa703f3869b46b18732fa0de60f6073"
                      },
                      "data": {
                        "id": "149da283-2958-4128-9d72-e3a02e8bb83d",
                        "userUuid": "6b082877-b137-4743-bba3-07b6a8148b42",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "fiducia-sandbox",
                        "status": "AWAITING_SCA_CODE",
                        "createdAt": "2021-06-09T11:47:24.513Z",
                        "expiresAt": "2021-09-07T00:00:00Z",
                        "timeToExpire": "P89DT12H6M39.998S",
                        "featureScope": [
                          "ACCOUNT_TRANSACTIONS",
                          "ACCOUNTS",
                          "ACCOUNT",
                          "ACCOUNT_BALANCES"
                        ],
                        "state": "c99f35c118194737b83487a0e6a48ed9",
                        "institutionConsentId": "4514274319060120226PSDLT-BL-LB002045CO9545RW",
                        "selectedScaMethod": {
                          "id": "942",
                          "type": "SMS_OTP",
                          "description": "mobile TAN"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfAuthorisationEmbeddedRequestResponse"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Update Embedded Account Authorisation",
        "tags": [
          "Authorisations"
        ]
      }
    },
    "/embedded-bulk-payment-auth-requests": {
      "post": {
        "description": "Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_BULK_PAYMENT` feature in order to obtain the the user's authorisation for a bulk payment. See [Bulk Payments](https://docs.yapily.com/guides/payments/payment-execution/bulk-payments) for more information. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/embedded/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`",
        "operationId": "createEmbeddedBulkPaymentAuthorisation",
        "parameters": [
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "Berlin Group EUR Embedded Bulk Payment Example Request": {
                  "description": "Berlin Group EUR Embedded Bulk Payment Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "fiducia-sandbox",
                    "userCredentials": {
                      "id": "VRK1234567890PLUS",
                      "password": "password"
                    },
                    "paymentRequest": {
                      "executionDateTime": "2021-10-29T00:00:00Z",
                      "payments": [
                        {
                          "type": "DOMESTIC_PAYMENT",
                          "paymentIdempotencyId": "e4f913909a3d11eabb370242ac130002",
                          "reference": "REFERENCE",
                          "amount": {
                            "amount": 1.00,
                            "currency": "EUR"
                          },
                          "payer": {
                            "name": "John Doe",
                            "accountIdentifications": [
                              {
                                "type": "IBAN",
                                "identification": "DE39499999600000005111"
                              }
                            ]
                          },
                          "payee": {
                            "name": "Jane Doe",
                            "address": {
                              "country": "DE"
                            },
                            "accountIdentifications": [
                              {
                                "type": "IBAN",
                                "identification": "DE12345678901234567890"
                              }
                            ]
                          }
                        },
                        {
                          "type": "DOMESTIC_PAYMENT",
                          "paymentIdempotencyId": "e4f913909a3d11eabb370242ac130002",
                          "reference": "REFERENCE",
                          "amount": {
                            "amount": 1.00,
                            "currency": "EUR"
                          },
                          "payer": {
                            "name": "Jane Doe",
                            "accountIdentifications": [
                              {
                                "type": "IBAN",
                                "identification": "DE39499999600000005111"
                              }
                            ]
                          },
                          "payee": {
                            "name": "John Doe",
                            "address": {
                              "country": "DE"
                            },
                            "accountIdentifications": [
                              {
                                "type": "IBAN",
                                "identification": "DE12345678900000000000"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/BulkPaymentEmbeddedAuthorisationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Berlin Group EUR Embedded Bulk Payment Example Response": {
                    "description": "Berlin Group EUR Embedded Bulk Payment Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "4ab90c8cc13a4b74ba855a48100d6084"
                      },
                      "data": {
                        "id": "6117b6dd-5a43-4f26-8e36-b91b9bf3c434",
                        "userUuid": "3ddf5dd0-aa48-4d0f-baa7-fa057e9e911d",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "fiducia-sandbox",
                        "status": "AWAITING_SCA_CODE",
                        "createdAt": "2021-08-02T14:58:45.446Z",
                        "featureScope": [
                          "EXISTING_PAYMENT_INITIATION_DETAILS",
                          "CREATE_BULK_PAYMENT",
                          "EXISTING_PAYMENTS_DETAILS"
                        ],
                        "state": "85853421299c44e0829debefffd8622e",
                        "institutionConsentId": "0515485612080120206PSDLT-BL-LB002045PA9545RW",
                        "scaMethods": [
                          {
                            "id": "932",
                            "type": "CHIP_OTP",
                            "description": "SmartTAN plus"
                          }
                        ],
                        "selectedScaMethod": {
                          "id": "932",
                          "type": "CHIP_OTP",
                          "description": "SmartTAN plus"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Create Embedded Bulk Payment Authorisation",
        "tags": [
          "Authorisations"
        ]
      }
    },
    "/embedded-bulk-payment-auth-requests/{consentId}": {
      "put": {
        "description": "Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a bulk payment. See [Bulk Payments](https://docs.yapily.com/guides/payments/payment-execution/bulk-payments) for more information. <br><br>See [Embedded Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/embedded/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_BULK_PAYMENT`",
        "operationId": "updateEmbeddedBulkPaymentAuthorisation",
        "parameters": [
          {
            "description": "__Mandatory__. The consent Id of the `Consent` to update.",
            "in": "path",
            "name": "consentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "Berlin Group EUR Embedded Bulk Payment (SCA Code) Example Request": {
                  "description": "Berlin Group EUR Embedded Bulk Payment (SCA Code) Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "fiducia-sandbox",
                    "scaCode": "123456",
                    "paymentRequest": {
                      "executionDateTime": "2021-10-29T00:00:00Z",
                      "payments": [
                        {
                          "type": "DOMESTIC_PAYMENT",
                          "paymentIdempotencyId": "e4f913909a3d11eabb370242ac130002",
                          "reference": "REFERENCE",
                          "amount": {
                            "amount": 1.00,
                            "currency": "EUR"
                          },
                          "payer": {
                            "name": "John Doe",
                            "accountIdentifications": [
                              {
                                "type": "IBAN",
                                "identification": "DE39499999600000005111"
                              }
                            ]
                          },
                          "payee": {
                            "name": "Jane Doe",
                            "address": {
                              "country": "DE"
                            },
                            "accountIdentifications": [
                              {
                                "type": "IBAN",
                                "identification": "DE12345678901234567890"
                              }
                            ]
                          }
                        },
                        {
                          "type": "DOMESTIC_PAYMENT",
                          "paymentIdempotencyId": "e4f913909a3d11eabb370242ac130002",
                          "reference": "REFERENCE",
                          "amount": {
                            "amount": 1.00,
                            "currency": "EUR"
                          },
                          "payer": {
                            "name": "Jane Doe",
                            "accountIdentifications": [
                              {
                                "type": "IBAN",
                                "identification": "DE39499999600000005111"
                              }
                            ]
                          },
                          "payee": {
                            "name": "John Doe",
                            "address": {
                              "country": "DE"
                            },
                            "accountIdentifications": [
                              {
                                "type": "IBAN",
                                "identification": "DE12345678900000000000"
                              }
                            ]
                          }
                        }
                      ]
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/BulkPaymentEmbeddedAuthorisationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Berlin Group EUR Embedded Bulk Payment (SCA Code) Example Response": {
                    "description": "Berlin Group EUR Embedded Bulk Payment (SCA Code) Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "cfa351c5de6f4398bb9deea04041acc5"
                      },
                      "data": {
                        "id": "6117b6dd-5a43-4f26-8e36-b91b9bf3c434",
                        "userUuid": "3ddf5dd0-aa48-4d0f-baa7-fa057e9e911d",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "fiducia-sandbox",
                        "status": "AUTHORIZED",
                        "createdAt": "2021-08-02T14:58:45.446Z",
                        "featureScope": [
                          "EXISTING_PAYMENT_INITIATION_DETAILS",
                          "CREATE_BULK_PAYMENT",
                          "EXISTING_PAYMENTS_DETAILS"
                        ],
                        "state": "85853421299c44e0829debefffd8622e",
                        "authorizedAt": "2021-08-02T14:59:29.174Z",
                        "institutionConsentId": "0515485612080120206PSDLT-BL-LB002045PA9545RW"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Update Embedded Bulk Payment Authorisation",
        "tags": [
          "Authorisations"
        ]
      }
    },
    "/embedded-payment-auth-requests": {
      "post": {
        "description": "Used to initiate the embedded authorisation process for an `Institution` that contains the `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT` feature in order to obtain the the user's authorisation for a payment.<br><br> See [Embedded Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/embedded/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`",
        "operationId": "createEmbeddedPaymentAuthorisation",
        "parameters": [
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "Berlin Group EUR Single Domestic Payment Example Request": {
                  "description": "Berlin Group EUR Single Domestic Payment Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "postbank-sandbox",
                    "userCredentials": {
                      "id": "6154057725",
                      "password": "PISPWD12"
                    },
                    "paymentRequest": {
                      "type": "DOMESTIC_PAYMENT",
                      "paymentIdempotencyId": "e4f913909a3d11eabb370242ac130002",
                      "reference": "REFERENCE",
                      "amount": {
                        "amount": 1.00,
                        "currency": "EUR"
                      },
                      "payer": {
                        "name": "John Doe",
                        "accountIdentifications": [
                          {
                            "type": "IBAN",
                            "identification": "DE12345678901234567890"
                          }
                        ]
                      },
                      "payee": {
                        "name": "Jane Doe",
                        "address": {
                          "country": "DE"
                        },
                        "accountIdentifications": [
                          {
                            "type": "IBAN",
                            "identification": "DE09876543210987654321"
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/PaymentEmbeddedAuthorisationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Berlin Group EUR Single Domestic Payment Example Response": {
                    "description": "Berlin Group EUR Single Domestic Payment Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "bcebc29b55434cc8b2aae80cb782edff"
                      },
                      "data": {
                        "id": "7c3f0355-f59b-4cc6-b13f-e1b5349b5caf",
                        "userUuid": "95f71ebc-c8ae-4e25-aded-86e9bbd62966",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "postbank-sandbox",
                        "state": "551440fc13794010855ad81c8463c926",
                        "status": "AWAITING_SCA_METHOD",
                        "createdAt": "2021-01-26T23:31:45.443Z",
                        "featureScope": [
                          "CREATE_DOMESTIC_SINGLE_PAYMENT",
                          "EXISTING_PAYMENTS_DETAILS",
                          "EXISTING_PAYMENT_INITIATION_DETAILS"
                        ],
                        "scaMethods": [
                          {
                            "id": "258211#OPTICAL",
                            "type": "CHIP_OTP",
                            "description": "Testkarte Hr. Haubach_1, optisch"
                          },
                          {
                            "id": "258211#MANUEL",
                            "type": "CHIP_OTP",
                            "description": "Testkarte Hr. Haubach_1, manuell"
                          },
                          {
                            "id": "591655",
                            "type": "SMS_OTP",
                            "description": "RolandmTAN"
                          },
                          {
                            "id": "591656",
                            "type": "PUSH_OTP",
                            "description": "RSRolandIP2"
                          }
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Create Embedded Payment Authorisation",
        "tags": [
          "Authorisations"
        ]
      }
    },
    "/embedded-payment-auth-requests/{consentId}": {
      "put": {
        "description": "Used to pass the SCA Code received from the `Institution` (and the SCA method selected by the user where multiple SCA methods are supported by the `Institution`) in order to complete the embedded authorisation to initiate a payment. <br><br> See [Embedded Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/embedded/) for more information about this flow.<br><br>Feature: `INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT`",
        "operationId": "updateEmbeddedPaymentAuthorisation",
        "parameters": [
          {
            "description": "__Mandatory__. The consent Id of the `Consent` to update.",
            "in": "path",
            "name": "consentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "Berlin Group EUR Single Domestic Payment (SCA Code) Example Request": {
                  "description": "Berlin Group EUR Single Domestic Payment (SCA Code) Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "postbank-sandbox",
                    "scaCode": "325614",
                    "paymentRequest": {
                      "type": "DOMESTIC_PAYMENT",
                      "paymentIdempotencyId": "e4f913909a3d11eabb370242ac130002",
                      "reference": "REFERENCE",
                      "amount": {
                        "amount": 1.00,
                        "currency": "EUR"
                      },
                      "payer": {
                        "name": "John Doe",
                        "accountIdentifications": [
                          {
                            "type": "IBAN",
                            "identification": "DE12345678901234567890"
                          }
                        ]
                      },
                      "payee": {
                        "name": "Jane Doe",
                        "address": {
                          "country": "DE"
                        },
                        "accountIdentifications": [
                          {
                            "type": "IBAN",
                            "identification": "DE09876543210987654321"
                          }
                        ]
                      }
                    }
                  }
                },
                "Berlin Group EUR Single Domestic Payment (Selected SCA Method) Example Request": {
                  "description": "Berlin Group EUR Single Domestic Payment (Selected SCA Method) Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "postbank-sandbox",
                    "selectedScaMethod": {
                      "id": "591655"
                    },
                    "paymentRequest": {
                      "type": "DOMESTIC_PAYMENT",
                      "paymentIdempotencyId": "e4f913909a3d11eabb370242ac130002",
                      "reference": "REFERENCE",
                      "amount": {
                        "amount": 1.00,
                        "currency": "EUR"
                      },
                      "payer": {
                        "name": "John Doe",
                        "accountIdentifications": [
                          {
                            "type": "IBAN",
                            "identification": "DE12345678901234567890"
                          }
                        ]
                      },
                      "payee": {
                        "name": "Jane Doe",
                        "address": {
                          "country": "DE"
                        },
                        "accountIdentifications": [
                          {
                            "type": "IBAN",
                            "identification": "DE09876543210987654321"
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/PaymentEmbeddedAuthorisationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Berlin Group EUR Single Domestic Payment (SCA Code) Example Response": {
                    "description": "Berlin Group EUR Single Domestic Payment (SCA Code) Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "94563449b4634d13b89b8f1c78c21882"
                      },
                      "data": {
                        "id": "1767d386-c20a-4136-a311-0a455dd41a78",
                        "userUuid": "95f71ebc-c8ae-4e25-aded-86e9bbd62966",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "postbank-sandbox",
                        "state": "048a1187a9324652bedb6a653211a8a3",
                        "status": "AUTHORIZED",
                        "createdAt": "2021-01-25T18:32:23.933Z",
                        "featureScope": [
                          "CREATE_DOMESTIC_SINGLE_PAYMENT",
                          "EXISTING_PAYMENT_INITIATION_DETAILS",
                          "EXISTING_PAYMENTS_DETAILS"
                        ],
                        "authorizedAt": "2021-01-25T18:33:18.248Z"
                      }
                    }
                  },
                  "Berlin Group EUR Single Domestic Payment (Selected SCA Method) Example Response": {
                    "description": "Berlin Group EUR Single Domestic Payment (Selected SCA Method) Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "f69f66322b4b482c93099a206d9f003e"
                      },
                      "data": {
                        "id": "1767d386-c20a-4136-a311-0a455dd41a78",
                        "userUuid": "95f71ebc-c8ae-4e25-aded-86e9bbd62966",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "postbank-sandbox",
                        "state": "048a1187a9324652bedb6a653211a8a3",
                        "status": "AWAITING_SCA_CODE",
                        "createdAt": "2021-01-25T18:32:23.933Z",
                        "featureScope": [
                          "CREATE_DOMESTIC_SINGLE_PAYMENT",
                          "EXISTING_PAYMENT_INITIATION_DETAILS",
                          "EXISTING_PAYMENTS_DETAILS"
                        ],
                        "selectedScaMethod": {
                          "id": "591655"
                        }
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Update Embedded Payment Authorisation",
        "tags": [
          "Authorisations"
        ]
      }
    },
    "/features": {
      "get": {
        "description": "Used to retrieve all features available from Yapily. Each `Institution` supports a one, many or all of these features and can be seen in the features field of the `Institution` object.<br><br>Note: Every `Institution` does not necessarily support every feature. To see which features are available for a particular Institution, use either the [Get Institutions](https://docs.yapily.com/api/#get-institutions) or [Get Institution](https://docs.yapily.com/api/#get-institution) endpoint and check the features array within the `Institution` payload.",
        "operationId": "getFeatureDetails",
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "b39dc53cf01847098b13f22c559228dd",
                        "count": 52
                      },
                      "data": [
                        {
                          "feature": "ACCOUNT",
                          "endpoint": "https://api.yapily.com/account/{account-id}",
                          "documentationUrl": "https://docs.yapily.com/#757fde49-a294-bbff-d5f9-2c21c5f57be0"
                        },
                        {
                          "feature": "ACCOUNTS",
                          "endpoint": "https://api.yapily.com/accounts",
                          "documentationUrl": "https://docs.yapily.com/#23faf44e-1093-c676-63ea-369e41ea902d"
                        },
                        {
                          "feature": "ACCOUNTS_WITHOUT_BALANCE",
                          "endpoint": "https://api.yapily.com/account-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "ACCOUNT_BALANCES",
                          "endpoint": "https://api.yapily.com/account/{account-id}/balances",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "ACCOUNT_BENEFICIARIES",
                          "endpoint": "https://api.yapily.com/accounts/{accountId}/beneficiaries",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "ACCOUNT_DIRECT_DEBITS",
                          "endpoint": "https://api.yapily.com/account/{accountId}/direct-debits",
                          "documentationUrl": "https://docs.yapily.com/#a5affc0a-c9cf-4203-b126-4a1bdcb7700a"
                        },
                        {
                          "feature": "ACCOUNT_PERIODIC_PAYMENTS",
                          "endpoint": "https://api.yapily.com/account/{accountId}/periodic-payments",
                          "documentationUrl": "https://docs.yapily.com/#98e43700-e9c7-4598-b337-42e86b099216"
                        },
                        {
                          "feature": "ACCOUNT_REQUEST_DETAILS",
                          "endpoint": "https://api.yapily.com/account-request/{authRequestId}",
                          "documentationUrl": "https://docs.yapily.com/#c8da0a20-6cb9-4282-aba5-4c66113eb70b"
                        },
                        {
                          "feature": "ACCOUNT_SCHEDULED_PAYMENTS",
                          "endpoint": "https://api.yapily.com/account/{accountId}/scheduled-payments",
                          "documentationUrl": "https://docs.yapily.com/#7eadb71e-d715-4c3f-927d-626c9e3a1303"
                        },
                        {
                          "feature": "ACCOUNT_STATEMENT",
                          "endpoint": "https://api.yapily.com/account/{accountId}/statements/{statementId}",
                          "documentationUrl": "https://docs.yapily.com/?version=latest#29101d1e-2c52-4d36-900a-18435dca75e0"
                        },
                        {
                          "feature": "ACCOUNT_STATEMENTS",
                          "endpoint": "https://api.yapily.com/account/{accountId}/statements",
                          "documentationUrl": "https://docs.yapily.com/#7358d865-3cf3-17da-cf0f-84a1af3b545f"
                        },
                        {
                          "feature": "ACCOUNT_STATEMENT_FILE",
                          "endpoint": "https://api.yapily.com/account/{accountId}/statements/{statementId}/file",
                          "documentationUrl": "https://docs.yapily.com/#3987b1e1-6b9c-4770-96de-fa85e2025d48"
                        },
                        {
                          "feature": "ACCOUNT_TRANSACTIONS",
                          "endpoint": "https://api.yapily.com/account/{account-id}/transactions",
                          "documentationUrl": "https://docs.yapily.com/#7358d865-3cf3-17da-cf0f-84a1af3b545f"
                        },
                        {
                          "feature": "ACCOUNT_TRANSACTIONS_WITH_MERCHANT",
                          "endpoint": "https://api.yapily.com/accounts/{accountId}/transactions",
                          "documentationUrl": "https://docs.yapily.com/#7358d865-3cf3-17da-cf0f-84a1af3b545f"
                        },
                        {
                          "feature": "ACCOUNT_WITHOUT_BALANCE",
                          "endpoint": "https://api.yapily.com/account/{account-id}",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "CREATE_BULK_PAYMENT",
                          "endpoint": "https://api.yapily.com/bulk-payments",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "CREATE_DOMESTIC_PERIODIC_PAYMENT",
                          "endpoint": "https://api.yapily.com/payments",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "CREATE_DOMESTIC_SCHEDULED_PAYMENT",
                          "endpoint": "https://api.yapily.com/payments",
                          "documentationUrl": "https://docs.yapily.com/#1fd6bf92-7333-4b46-be2c-1a92a3c72b1c"
                        },
                        {
                          "feature": "CREATE_DOMESTIC_SINGLE_INSTANT_PAYMENT",
                          "endpoint": "https://api.yapily.com/payments",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "CREATE_DOMESTIC_SINGLE_PAYMENT",
                          "endpoint": "https://api.yapily.com/payments",
                          "documentationUrl": "https://docs.yapily.com/#4521aa4d-75c2-4c22-9629-acb96c14e4e6"
                        },
                        {
                          "feature": "CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT",
                          "endpoint": "https://api.yapily.com/payments",
                          "documentationUrl": "https://docs.yapily.com/#1fd6bf92-7333-4b46-be2c-1a92a3c72b1c"
                        },
                        {
                          "feature": "CREATE_INTERNATIONAL_PERIODIC_PAYMENT",
                          "endpoint": "https://api.yapily.com/payments",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "CREATE_INTERNATIONAL_SCHEDULED_PAYMENT",
                          "endpoint": "https://api.yapily.com/payments",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "CREATE_INTERNATIONAL_SINGLE_PAYMENT",
                          "endpoint": "https://api.yapily.com/payments",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "CREATE_SINGLE_PAYMENT_SORTCODE",
                          "endpoint": "https://api.yapily.com/payment-sortcode",
                          "documentationUrl": "https://docs.yapily.com/#4521aa4d-75c2-4c22-9629-acb96c14e4e6"
                        },
                        {
                          "feature": "EXISTING_PAYMENTS_DETAILS",
                          "endpoint": "https://api.yapily.com/payments/{payment-id}",
                          "documentationUrl": "https://docs.yapily.com/#2e1a151e-59a7-4fa1-bd5b-5f6a0c4bf4cd"
                        },
                        {
                          "feature": "EXISTING_PAYMENT_INITIATION_DETAILS",
                          "endpoint": "https://api.yapily.com/payment-initiations/{paymentId}",
                          "documentationUrl": "https://docs.yapily.com/#c8da0a20-6cb9-4282-aba5-4c66113eb70b"
                        },
                        {
                          "feature": "IDENTITY",
                          "endpoint": "https://api.yapily.com/identity",
                          "documentationUrl": "https://docs.yapily.com/#8c62ef0f-0cfa-98e6-6b0b-cb2441eb2d51"
                        },
                        {
                          "feature": "INITIATE_ACCOUNT_REQUEST",
                          "endpoint": "https://api.yapily.com/account-auth-requests",
                          "documentationUrl": "https://docs.yapily.com/#c8da0a20-6cb9-4282-aba5-4c66113eb70b"
                        },
                        {
                          "feature": "INITIATE_BULK_PAYMENT",
                          "endpoint": "https://api.yapily.com/bulk-payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "INITIATE_DOMESTIC_PERIODIC_PAYMENT",
                          "endpoint": "https://api.yapily.com/payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "INITIATE_DOMESTIC_SCHEDULED_PAYMENT",
                          "endpoint": "https://api.yapily.com/payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com#8e67c40c-4b0e-4f72-947c-065f1c84f46b"
                        },
                        {
                          "feature": "INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT",
                          "endpoint": "https://api.yapily.com/payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "INITIATE_DOMESTIC_SINGLE_PAYMENT",
                          "endpoint": "https://api.yapily.com/payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com/#c8da0a20-6cb9-4282-aba5-4c66113eb70b"
                        },
                        {
                          "feature": "INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT",
                          "endpoint": "https://api.yapily.com/payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com/#8e67c40c-4b0e-4f72-947c-065f1c84f46b"
                        },
                        {
                          "feature": "INITIATE_EMBEDDED_ACCOUNT_REQUEST",
                          "endpoint": "https://api.yapily.com/embedded-account-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT",
                          "endpoint": "https://api.yapily.com/embedded-payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "INITIATE_EMBEDDED_BULK_PAYMENT",
                          "endpoint": "https://api.yapily.com/embedded-payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com/"
                        },
                        {
                          "feature": "INITIATE_INTERNATIONAL_PERIODIC_PAYMENT",
                          "endpoint": "https://api.yapily.com/payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT",
                          "endpoint": "https://api.yapily.com/payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "INITIATE_INTERNATIONAL_SINGLE_PAYMENT",
                          "endpoint": "https://api.yapily.com/payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "INITIATE_PRE_AUTHORISATION",
                          "endpoint": "https://api.yapily.com/pre-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "INITIATE_SINGLE_PAYMENT_SORTCODE",
                          "endpoint": "https://api.yapily.com/payment-sortcode-auth-requests",
                          "documentationUrl": "https://docs.yapily.com/#c8da0a20-6cb9-4282-aba5-4c66113eb70b"
                        },
                        {
                          "feature": "OPEN_DATA_ATMS",
                          "endpoint": "https://api.yapily.com/institutions/{institution-id}/atms",
                          "documentationUrl": "https://docs.yapily.com/#f5d271e1-8375-4a4a-a446-6ab9fd823f79"
                        },
                        {
                          "feature": "OPEN_DATA_PERSONAL_CURRENT_ACCOUNTS",
                          "endpoint": "https://api.yapily.com/institutions/{institution-id}/personal-current-accounts",
                          "documentationUrl": "https://docs.yapily.com/#6af35149-9db9-4eb4-862f-93187c64cbcd"
                        },
                        {
                          "feature": "PERIODIC_PAYMENT_FREQUENCY_EXTENDED",
                          "endpoint": "https://api.yapily.com/payments",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "READ_DOMESTIC_PERIODIC_PAYMENT_REFUND",
                          "endpoint": "https://api.yapily.com/payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "READ_DOMESTIC_SCHEDULED_REFUND",
                          "endpoint": "https://api.yapily.com/payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "READ_DOMESTIC_SINGLE_REFUND",
                          "endpoint": "https://api.yapily.com/payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "READ_INTERNATIONAL_SCHEDULED_REFUND",
                          "endpoint": "https://api.yapily.com/payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "READ_INTERNATIONAL_SINGLE_REFUND",
                          "endpoint": "https://api.yapily.com/payment-auth-requests",
                          "documentationUrl": "https://docs.yapily.com"
                        },
                        {
                          "feature": "TRANSFER",
                          "endpoint": "https://api.yapily.com/accounts/{accountId}/transfer",
                          "documentationUrl": "https://docs.yapily.com/#c8da0a20-6cb9-4282-aba5-4c66113eb70b"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiListResponseOfFeatureDetails"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Features",
        "tags": [
          "Institutions"
        ]
      }
    },
    "/identity": {
      "get": {
        "description": "Used to get the identity information for an account.<br><br>Feature: `IDENTITY`",
        "operationId": "getIdentity",
        "parameters": [
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "e4de605bd760459aa7f82aa81856ec1e"
                      },
                      "data": {
                        "id": "700001000000000000000002",
                        "fullName": "Mitsuhirato",
                        "email": "mits@suntori.com",
                        "phone": "+22-8937484901",
                        "addresses": [
                          {
                            "addressLines": [],
                            "city": "Hichikanzo",
                            "postalCode": "JP102",
                            "country": "TA"
                          },
                          {
                            "addressLines": [],
                            "city": "St Albans",
                            "postalCode": "AL1 3SF",
                            "country": "GB"
                          }
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfIdentity"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Identity",
        "tags": [
          "Financial Data"
        ]
      }
    },
    "/institutions": {
      "get": {
        "description": "Used to retrieve all `Institutions` within an application",
        "operationId": "getInstitutions",
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "1304b771e4e34f67b39977bde6b1a8e2",
                        "count": 1
                      },
                      "data": [
                        {
                          "id": "modelo-sandbox",
                          "name": "Modelo Sandbox",
                          "fullName": "Modelo Sandbox",
                          "countries": [
                            {
                              "displayName": "United Kingdom",
                              "countryCode2": "GB"
                            }
                          ],
                          "environmentType": "SANDBOX",
                          "credentialsType": "OPEN_BANKING_UK_AUTO",
                          "media": [
                            {
                              "source": "https://images.yapily.com/image/ce2bfdbf-1ae2-4919-ab7b-e8b3d5e93b36?size=0",
                              "type": "icon"
                            },
                            {
                              "source": "https://images.yapily.com/image/ca502f24-d6df-4785-b4b8-1034b100af77?size=0",
                              "type": "logo"
                            }
                          ],
                          "features": [
                            "ACCOUNT_BALANCES",
                            "INITIATE_BULK_PAYMENT",
                            "ACCOUNT_BENEFICIARIES",
                            "ACCOUNT_SCHEDULED_PAYMENTS",
                            "EXISTING_PAYMENTS_DETAILS",
                            "ACCOUNT_TRANSACTIONS",
                            "ACCOUNT_STATEMENTS",
                            "INITIATE_DOMESTIC_PERIODIC_PAYMENT",
                            "INITIATE_ACCOUNT_REQUEST",
                            "IDENTITY",
                            "ACCOUNT_PERIODIC_PAYMENTS",
                            "ACCOUNT_REQUEST_DETAILS",
                            "ACCOUNT_TRANSACTIONS_WITH_MERCHANT",
                            "INITIATE_SINGLE_PAYMENT_SORTCODE",
                            "INITIATE_DOMESTIC_SINGLE_PAYMENT",
                            "INITIATE_DOMESTIC_SCHEDULED_PAYMENT",
                            "ACCOUNT_STATEMENT",
                            "CREATE_DOMESTIC_SINGLE_PAYMENT",
                            "ACCOUNT_STATEMENT_FILE",
                            "CREATE_DOMESTIC_PERIODIC_PAYMENT",
                            "CREATE_DOMESTIC_SCHEDULED_PAYMENT",
                            "EXISTING_PAYMENT_INITIATION_DETAILS",
                            "INITIATE_INTERNATIONAL_SINGLE_PAYMENT",
                            "CREATE_SINGLE_PAYMENT_SORTCODE",
                            "CREATE_BULK_PAYMENT",
                            "CREATE_INTERNATIONAL_SINGLE_PAYMENT",
                            "ACCOUNT",
                            "PERIODIC_PAYMENT_FREQUENCY_EXTENDED",
                            "ACCOUNT_DIRECT_DEBITS",
                            "ACCOUNTS"
                          ]
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiListResponseOfInstitution"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Institutions",
        "tags": [
          "Institutions"
        ]
      }
    },
    "/institutions/{institutionId}": {
      "get": {
        "description": "Used to retrieves details of a specific `Institution` within an application",
        "operationId": "getInstitution",
        "parameters": [
          {
            "description": "__Mandatory__. The Yapily institution Id for the `Institution`.",
            "in": "path",
            "name": "institutionId",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "id": "modelo-sandbox",
                      "name": "Modelo Sandbox",
                      "fullName": "Modelo Sandbox",
                      "countries": [
                        {
                          "displayName": "United Kingdom",
                          "countryCode2": "GB"
                        }
                      ],
                      "environmentType": "SANDBOX",
                      "credentialsType": "OPEN_BANKING_UK_AUTO",
                      "media": [
                        {
                          "source": "https://images.yapily.com/image/ce2bfdbf-1ae2-4919-ab7b-e8b3d5e93b36?size=0",
                          "type": "icon"
                        },
                        {
                          "source": "https://images.yapily.com/image/ca502f24-d6df-4785-b4b8-1034b100af77?size=0",
                          "type": "logo"
                        }
                      ],
                      "features": [
                        "ACCOUNT_BALANCES",
                        "INITIATE_BULK_PAYMENT",
                        "ACCOUNT_BENEFICIARIES",
                        "ACCOUNT_SCHEDULED_PAYMENTS",
                        "EXISTING_PAYMENTS_DETAILS",
                        "ACCOUNT_TRANSACTIONS",
                        "ACCOUNT_STATEMENTS",
                        "INITIATE_DOMESTIC_PERIODIC_PAYMENT",
                        "INITIATE_ACCOUNT_REQUEST",
                        "IDENTITY",
                        "ACCOUNT_PERIODIC_PAYMENTS",
                        "ACCOUNT_REQUEST_DETAILS",
                        "ACCOUNT_TRANSACTIONS_WITH_MERCHANT",
                        "INITIATE_SINGLE_PAYMENT_SORTCODE",
                        "INITIATE_DOMESTIC_SINGLE_PAYMENT",
                        "INITIATE_DOMESTIC_SCHEDULED_PAYMENT",
                        "ACCOUNT_STATEMENT",
                        "CREATE_DOMESTIC_SINGLE_PAYMENT",
                        "ACCOUNT_STATEMENT_FILE",
                        "CREATE_DOMESTIC_PERIODIC_PAYMENT",
                        "CREATE_DOMESTIC_SCHEDULED_PAYMENT",
                        "EXISTING_PAYMENT_INITIATION_DETAILS",
                        "INITIATE_INTERNATIONAL_SINGLE_PAYMENT",
                        "CREATE_SINGLE_PAYMENT_SORTCODE",
                        "CREATE_BULK_PAYMENT",
                        "CREATE_INTERNATIONAL_SINGLE_PAYMENT",
                        "ACCOUNT",
                        "PERIODIC_PAYMENT_FREQUENCY_EXTENDED",
                        "ACCOUNT_DIRECT_DEBITS",
                        "ACCOUNTS"
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Institution"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Institution",
        "tags": [
          "Institutions"
        ]
      }
    },
    "/me": {
      "get": {
        "description": "Get the information about the institutions configured in your application",
        "operationId": "getApplicationMe",
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "uuid": "64949de6-6510-4d70-9500-d4aa094c506c",
                      "name": "APPLICATION NAME",
                      "active": true,
                      "authCallbacks": [
                        "https://display-parameters.com/"
                      ],
                      "institutions": [
                        {
                          "id": "modelo-sandbox",
                          "name": "Modelo Sandbox",
                          "fullName": "Modelo Sandbox",
                          "countries": [
                            {
                              "displayName": "United Kingdom",
                              "countryCode2": "GB"
                            }
                          ],
                          "environmentType": "SANDBOX",
                          "credentialsType": "OPEN_BANKING_UK_AUTO",
                          "media": [
                            {
                              "source": "https://images.yapily.com/image/ce2bfdbf-1ae2-4919-ab7b-e8b3d5e93b36?size=0",
                              "type": "icon"
                            },
                            {
                              "source": "https://images.yapily.com/image/ca502f24-d6df-4785-b4b8-1034b100af77?size=0",
                              "type": "logo"
                            }
                          ],
                          "features": [
                            "INITIATE_SINGLE_PAYMENT_SORTCODE",
                            "CREATE_DOMESTIC_PERIODIC_PAYMENT",
                            "ACCOUNT_REQUEST_DETAILS",
                            "ACCOUNT_STATEMENT_FILE",
                            "CREATE_SINGLE_PAYMENT_SORTCODE",
                            "ACCOUNTS",
                            "CREATE_DOMESTIC_SCHEDULED_PAYMENT",
                            "ACCOUNT_PERIODIC_PAYMENTS",
                            "CREATE_DOMESTIC_SINGLE_PAYMENT",
                            "INITIATE_DOMESTIC_PERIODIC_PAYMENT",
                            "EXISTING_PAYMENTS_DETAILS",
                            "INITIATE_BULK_PAYMENT",
                            "EXISTING_PAYMENT_INITIATION_DETAILS",
                            "ACCOUNT_DIRECT_DEBITS",
                            "ACCOUNT_TRANSACTIONS",
                            "INITIATE_DOMESTIC_SINGLE_PAYMENT",
                            "PERIODIC_PAYMENT_FREQUENCY_EXTENDED",
                            "CREATE_INTERNATIONAL_SINGLE_PAYMENT",
                            "ACCOUNT_SCHEDULED_PAYMENTS",
                            "ACCOUNT",
                            "ACCOUNT_STATEMENTS",
                            "ACCOUNT_TRANSACTIONS_WITH_MERCHANT",
                            "CREATE_BULK_PAYMENT",
                            "ACCOUNT_BALANCES",
                            "INITIATE_INTERNATIONAL_SINGLE_PAYMENT",
                            "INITIATE_DOMESTIC_SCHEDULED_PAYMENT",
                            "ACCOUNT_BENEFICIARIES",
                            "IDENTITY",
                            "ACCOUNT_STATEMENT",
                            "INITIATE_ACCOUNT_REQUEST"
                          ]
                        }
                      ],
                      "media": [],
                      "created": "2020-11-09T10:05:29.897+0000",
                      "updated": "2021-04-14T12:51:07.419+0000"
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/Application"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Application Self",
        "tags": [
          "Application"
        ]
      }
    },
    "/payment-auth-requests": {
      "post": {
        "description": "Used to initiate the authorisation process and direct users to the login screen of their financial Institution in order to give their consent for a payment. This endpoint is used to initiate all the different payment listed below. Based on the type of payment you wish to make, you may be required to provide specific properties in [PaymentRequest](https://docs.yapily.com/api/#tocS_PaymentRequest). First make sure that the payment feature you wish to execute is supported by the bank by checking the features array in [GET Institution](https://docs.yapily.com/api/#get-institution). <br><br>See [Redirect Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/redirect/) for more information about this flow.<br><br>Features:<ul><li>`INITIATE_DOMESTIC_PERIODIC_PAYMENT`</li><li>`INITIATE_DOMESTIC_SCHEDULED_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_PERIODIC_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SINGLE_PAYMENT`</li></ul>",
        "operationId": "createPaymentAuthorisation",
        "parameters": [
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "EUR Single Domestic Example Request": {
                  "description": "EUR Single Domestic Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "bpm-sandbox",
                    "callback": "https://display-parameters.com/",
                    "paymentRequest": {
                      "paymentIdempotencyId": "234g87t58tgeuo848wudjew489",
                      "payer": {
                        "name": "John Doe",
                        "accountIdentifications": [
                          {
                            "type": "IBAN",
                            "identification": "DE12345678901234567890"
                          }
                        ]
                      },
                      "amount": {
                        "amount": 1.00,
                        "currency": "EUR"
                      },
                      "reference": "Bill Payment",
                      "type": "DOMESTIC_PAYMENT",
                      "payee": {
                        "name": "Jane Doe",
                        "address": {
                          "country": "BE"
                        },
                        "accountIdentifications": [
                          {
                            "type": "IBAN",
                            "identification": "BE12345678901234"
                          }
                        ]
                      }
                    }
                  }
                },
                "GBP Single Domestic Example Request": {
                  "description": "GBP Single Domestic Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "modelo-sandbox",
                    "callback": "https://display-parameters.com/",
                    "paymentRequest": {
                      "paymentIdempotencyId": "4289457hd38djoa783jw9qag3",
                      "amount": {
                        "amount": 1.00,
                        "currency": "GBP"
                      },
                      "reference": "Bill Payment",
                      "type": "DOMESTIC_PAYMENT",
                      "payee": {
                        "name": "Jane Doe",
                        "address": {
                          "country": "GB"
                        },
                        "accountIdentifications": [
                          {
                            "type": "SORT_CODE",
                            "identification": "123456"
                          },
                          {
                            "type": "ACCOUNT_NUMBER",
                            "identification": "12345678"
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/PaymentAuthorisationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "EUR Single Domestic Example Response": {
                    "description": "EUR Single Domestic Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "a3d09f97bea244e2bb8be0bffbe53f81"
                      },
                      "data": {
                        "id": "cae22f3d-1033-4ba6-95ae-0d8ca193b090",
                        "userUuid": "5350782b-60f3-489e-aae5-a24d8d679a07",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "bpm-sandbox",
                        "status": "AWAITING_AUTHORIZATION",
                        "createdAt": "2021-06-10T11:47:12.887Z",
                        "featureScope": [
                          "EXISTING_PAYMENTS_DETAILS",
                          "CREATE_DOMESTIC_SINGLE_PAYMENT",
                          "EXISTING_PAYMENT_INITIATION_DETAILS"
                        ],
                        "state": "6a5f69be6a084b5c8c1becac88d45c95",
                        "institutionConsentId": "79cee256-077f-4e11-a307-43892646a4a6",
                        "authorisationUrl": "https://scasandbox.bancobpm.it/sca/login.html?paymentId=79cee256-077f-4e11-a307-43892646a4a6&tppAuthenticationRedirectUri=https%3A%2F%2Fauth.yapily.com%2F%3Ftwofold_redirect%3Dtrue%26state%3D6a5f69be6a084b5c8c1becac88d45c95&tppName=YAPILY+LTD&aspspCode=05034&aspspProductCode=IBP01&tppRegistrationNumber=PSDGB-FCA-927459&hash=GY5CmKG3MVeoxrboUQkjCoIb1X0nGR9ZTfoIG3T%2FLx1At1UJ92w0sjDeRXbNP9NhO203Y03UeI6Xn9ThebOjtQ%3D%3D",
                        "qrCodeUrl": "https://images.yapily.com/image/5955c0db-a5b7-4b12-a682-0f83317ba46d/1623325632?size=0"
                      }
                    }
                  },
                  "GBP Single Domestic Example Response": {
                    "description": "GBP Single Domestic Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "2dbfd85b4f2940c6a206e96dd90e52d0"
                      },
                      "data": {
                        "id": "eb39f8ae-aeff-4ffa-a23d-d4a5b3eff406",
                        "userUuid": "3ddf5dd0-aa48-4d0f-baa7-fa057e9e911d",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "modelo-sandbox",
                        "status": "AWAITING_AUTHORIZATION",
                        "createdAt": "2021-06-08T09:45:42.145Z",
                        "featureScope": [
                          "EXISTING_PAYMENTS_DETAILS",
                          "EXISTING_PAYMENT_INITIATION_DETAILS",
                          "CREATE_DOMESTIC_SINGLE_PAYMENT"
                        ],
                        "state": "430b2756e9724c8eaad3862524817260",
                        "institutionConsentId": "sdp-1-6d8d035e-868e-4355-be41-bddc25b7aac8",
                        "authorisationUrl": "https://ob19-auth1-ui.o3bank.co.uk/auth?client_id=e7f6b95b-5f35-419b-b301-8b08bcd946de&response_type=code+id_token&state=430b2756e9724c8eaad3862524817260&nonce=430b2756e9724c8eaad3862524817260&scope=openid+payments&redirect_uri=https%3A%2F%2Fauth.yapily.com%2F&request=eyJraWQiOiJnRTRvU3VaZDl4TVpUNXZDdTNWYy1mdktNak0iLCJhbGciOiJQUzI1NiJ9.eyJhdWQiOiJodHRwczovL29iMTktYXV0aDEtdWkubzNiYW5rLmNvLnVrIiwic2NvcGUiOiJvcGVuaWQgcGF5bWVudHMiLCJpc3MiOiJlN2Y2Yjk1Yi01ZjM1LTQxOWItYjMwMS04YjA4YmNkOTQ2ZGUiLCJjbGllbnRfaWQiOiJlN2Y2Yjk1Yi01ZjM1LTQxOWItYjMwMS04YjA4YmNkOTQ2ZGUiLCJyZXNwb25zZV90eXBlIjoiY29kZSBpZF90b2tlbiIsInJlZGlyZWN0X3VyaSI6Imh0dHBzOi8vYXV0aC55YXBpbHkuY29tLyIsInN0YXRlIjoiNDMwYjI3NTZlOTcyNGM4ZWFhZDM4NjI1MjQ4MTcyNjAiLCJjbGFpbXMiOnsiaWRfdG9rZW4iOnsiYWNyIjp7InZhbHVlIjoidXJuOm9wZW5iYW5raW5nOnBzZDI6c2NhIiwiZXNzZW50aWFsIjp0cnVlfSwib3BlbmJhbmtpbmdfaW50ZW50X2lkIjp7InZhbHVlIjoic2RwLTEtNmQ4ZDAzNWUtODY4ZS00MzU1LWJlNDEtYmRkYzI1YjdhYWM4IiwiZXNzZW50aWFsIjp0cnVlfX0sInVzZXJpbmZvIjp7Im9wZW5iYW5raW5nX2ludGVudF9pZCI6eyJ2YWx1ZSI6InNkcC0xLTZkOGQwMzVlLTg2OGUtNDM1NS1iZTQxLWJkZGMyNWI3YWFjOCIsImVzc2VudGlhbCI6dHJ1ZX19fSwibm9uY2UiOiI0MzBiMjc1NmU5NzI0YzhlYWFkMzg2MjUyNDgxNzI2MCIsImp0aSI6IjJjYzczMzRhLTJmMDYtNDNjNi04MDkzLTNiYWZjNjQzMWE0YyIsImlhdCI6MTYyMzE0NTU0MiwiZXhwIjoxNjIzMTQ3MzQyfQ.bh0sCVmwkwbx_rxxIwE6p7SjswaH007bdMJfWYo_njIHwoPOkcGjygi2yU7bpNd7bqeqxY1adtkMg_acg6A7awq1jX7nxv6mZC44Q2zGKNMc_nOQPSNO6LkktRcozBxyJ2sEfLheVmmVsyyCQw4FV0w_7Cgc4tFO11FjZ0LNxbp5kpMCK7SABa4RgvZ4IpG-Zl6jFKHfNK1zUP79yBaQcBvNseIirAmG3iJjdpwVc3tD8bl-0SPcPwStk1A3T8OvOgW8DKM4OSEPgKL73I9CExQiJzYykKYLr8tp9bQmI0OgajVM9BT2nbKszRnRe92gPq31goRHHWhfzgQHKFBCNg",
                        "qrCodeUrl": "https://images.yapily.com/image/5121fd6a-5010-4f36-9c25-df691cf465c1/1623145542?size=0"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfPaymentAuthorisationRequestResponse"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Create Payment Authorisation",
        "tags": [
          "Authorisations"
        ]
      },
      "put": {
        "description": "Used to continue the authorisation process and for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature and direct user to the login screen of their financial institution in order to give consent to initiate a payment. <br><br>See [Redirect Payment Flows](https://docs.yapily.com/guides/payments/payment-authorisation-flows/redirect/) for more information about this flow. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`",
        "operationId": "updatePaymentAuthorisation",
        "parameters": [
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "Berlin Group EUR Single Domestic Payment Example Request": {
                  "description": "Berlin Group EUR Single Domestic Payment Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "n26",
                    "paymentRequest": {
                      "paymentIdempotencyId": "234g87t58tgeuo848wudjew489",
                      "payer": {
                        "name": "John Doe",
                        "accountIdentifications": [
                          {
                            "type": "IBAN",
                            "identification": "DE12345678901234567890"
                          }
                        ]
                      },
                      "amount": {
                        "amount": 1.00,
                        "currency": "EUR"
                      },
                      "reference": "Bill Payment",
                      "type": "DOMESTIC_PAYMENT",
                      "payee": {
                        "name": "Jane Doe",
                        "address": {
                          "country": "BE"
                        },
                        "accountIdentifications": [
                          {
                            "type": "IBAN",
                            "identification": "BE12345678901234"
                          }
                        ]
                      }
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/PaymentAuthorisationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Berlin Group EUR Single Domestic Payment Example Response": {
                    "description": "Berlin Group EUR Single Domestic Payment Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "54ec0645a5b444c4a70c61357e9ad887"
                      },
                      "data": {
                        "id": "53ff00d0-91dd-417d-880b-cdd7c50090ed",
                        "userUuid": "e2578545-27a4-4edf-983f-5d33c2d7b559",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "n26",
                        "state": "4399535ee4de46238fce108a95669848",
                        "status": "AWAITING_DECOUPLED_AUTHORIZATION",
                        "createdAt": "2021-06-10T09:54:46.669Z",
                        "featureScope": [
                          "INITIATE_PRE_AUTHORISATION",
                          "CREATE_DOMESTIC_SINGLE_PAYMENT",
                          "EXISTING_PAYMENTS_DETAILS"
                        ],
                        "authorizedAt": "2021-06-10T09:55:22.359Z",
                        "institutionConsentId": "a9582f8e-08be-4cca-9f01-1ad3be96532d"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfPaymentAuthorisationRequestResponse"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Update Payment Pre-authorisation",
        "tags": [
          "Authorisations"
        ]
      }
    },
    "/payments": {
      "post": {
        "description": "Used to initiate a payment after obtaining the user's authorisation. <br><br>Features:<ul><li>`INITIATE_DOMESTIC_PERIODIC_PAYMENT`</li><li>`INITIATE_DOMESTIC_SCHEDULED_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT`</li><li>`INITIATE_DOMESTIC_SINGLE_PAYMENT`</li><li>`INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_PERIODIC_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT`</li><li>`INITIATE_INTERNATIONAL_SINGLE_PAYMENT`</li></ul>",
        "operationId": "createPayment",
        "parameters": [
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "EUR Domestic Single Payment Example Request": {
                  "description": "EUR Domestic Single Payment Example Request",
                  "value": {
                    "paymentIdempotencyId": "234g87t58tgeuo848wudjew489",
                    "payer": {
                      "name": "John Doe",
                      "accountIdentifications": [
                        {
                          "type": "IBAN",
                          "identification": "DE12345678901234567890"
                        }
                      ]
                    },
                    "amount": {
                      "amount": 1.00,
                      "currency": "EUR"
                    },
                    "reference": "Bill Payment",
                    "type": "DOMESTIC_PAYMENT",
                    "payee": {
                      "name": "Jane Doe",
                      "address": {
                        "country": "BE"
                      },
                      "accountIdentifications": [
                        {
                          "type": "IBAN",
                          "identification": "BE12345678901234"
                        }
                      ]
                    }
                  }
                },
                "GBP Domestic Single Payment Example Request": {
                  "description": "GBP Domestic Single Payment Example Request",
                  "value": {
                    "paymentIdempotencyId": "4289457hd38djoa783jw9qag3",
                    "amount": {
                      "amount": 1.00,
                      "currency": "GBP"
                    },
                    "reference": "Bill Payment",
                    "type": "DOMESTIC_PAYMENT",
                    "payee": {
                      "name": "Jane Doe",
                      "address": {
                        "country": "GB"
                      },
                      "accountIdentifications": [
                        {
                          "type": "SORT_CODE",
                          "identification": "123456"
                        },
                        {
                          "type": "ACCOUNT_NUMBER",
                          "identification": "12345678"
                        }
                      ]
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/PaymentRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "EUR Domestic Single Payment Example Response": {
                    "description": "EUR Domestic Single Payment Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "0f14e900011b445fa6b6c2c4272d7321"
                      },
                      "data": {
                        "id": "a9582f8e-08be-4cca-9f01-1ad3be96532d",
                        "status": "COMPLETED",
                        "statusDetails": {
                          "status": "COMPLETED",
                          "isoStatus": {
                            "code": "ACCP",
                            "name": "AcceptedCustomerProfile"
                          }
                        },
                        "payer": {
                          "name": "John Doe",
                          "accountIdentifications": [
                            {
                              "type": "IBAN",
                              "identification": "DE12345678901234567890"
                            }
                          ]
                        },
                        "payeeDetails": {
                          "name": "Jane Doe",
                          "accountIdentifications": [
                            {
                              "type": "IBAN",
                              "identification": "BE12345678901234"
                            }
                          ]
                        },
                        "reference": "Bill Payment",
                        "amount": 1.00,
                        "currency": "EUR",
                        "amountDetails": {
                          "amount": 1.00,
                          "currency": "EUR"
                        }
                      }
                    }
                  },
                  "GBP Domestic Single Payment Example Response": {
                    "description": "GBP Domestic Single Payment Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "2b93dc6029634a5095b3415cc5cc0e84"
                      },
                      "data": {
                        "id": "pv3-a6ac6528-e8c8-44eb-b6f9-8521963518dc",
                        "institutionConsentId": "sdp-1-27a192bb-482f-4731-989b-e7271661248c",
                        "paymentIdempotencyId": "4289457hd38djoa783jw9qag3",
                        "paymentLifecycleId": "3gaq9wj387aojd83dh7549824",
                        "status": "COMPLETED",
                        "statusDetails": {
                          "status": "COMPLETED",
                          "statusUpdateDate": "2021-06-10T11:26:54.887Z",
                          "isoStatus": {
                            "code": "ACSC",
                            "name": "AcceptedSettlementCompleted"
                          }
                        },
                        "payeeDetails": {
                          "name": "Jane Doe",
                          "accountIdentifications": [
                            {
                              "type": "ACCOUNT_NUMBER",
                              "identification": "12345678"
                            },
                            {
                              "type": "SORT_CODE",
                              "identification": "123456"
                            }
                          ]
                        },
                        "reference": "Bill Payment",
                        "amount": 1.00,
                        "currency": "GBP",
                        "amountDetails": {
                          "amount": 1.00,
                          "currency": "GBP"
                        },
                        "createdAt": "2021-06-10T11:26:54.887Z"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfPaymentResponse"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Create Payment",
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{paymentId}/details": {
      "get": {
        "description": "Used to get the payment details of a payment. This is most commonly used to check for any updates to the payment status. <br><br>Feature: `EXISTING_PAYMENTS_DETAILS`",
        "operationId": "getPayments",
        "parameters": [
          {
            "description": "__Mandatory__. The payment Id of the payment.",
            "in": "path",
            "name": "paymentId",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Mandatory__. The `consent-token` containing the user's authorisation to make the request.",
            "example": "{consentToken}",
            "in": "header",
            "name": "consent",
            "required": true,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a personal account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. Represents the user's login ID for the `Institution` to a business account. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-corporate-id",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Conditional__. The IP address of the PSU. <br><br>See [PSU identifiers](https://docs.yapily.com/knowledge/psu_identifiers/) to see if this header is required.",
            "in": "header",
            "name": "psu-ip-address",
            "required": false,
            "schema": {
              "type": "string"
            }
          },
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "EUR Single Domestic Payment Example Response": {
                    "description": "EUR Single Domestic Payment Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "590c99aecd2844c7a5c3ea00c55ce0ef"
                      },
                      "data": {
                        "payments": [
                          {
                            "paymentIdempotencyId": "234g87t58tgeuo848wudjew489",
                            "payer": {
                              "name": "John Doe",
                              "accountIdentifications": [
                                {
                                  "type": "IBAN",
                                  "identification": "DE12345678901234567890"
                                }
                              ]
                            },
                            "amount": 1.00,
                            "amountDetails": {
                              "amount": 1.00,
                              "currency": "EUR"
                            },
                            "reference": "Bill Payment",
                            "type": "DOMESTIC_PAYMENT",
                            "payee": {
                              "name": "Jane Doe",
                              "address": {
                                "country": "BE"
                              },
                              "accountIdentifications": [
                                {
                                  "type": "IBAN",
                                  "identification": "BE12345678901234"
                                }
                              ]
                            }
                          }
                        ]
                      }
                    }
                  },
                  "GBP Single Domestic Payment Example Response": {
                    "description": "GBP Single Domestic Payment Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "547ffd74b2ea46968cef64e0ddac59e1"
                      },
                      "data": {
                        "payments": [
                          {
                            "id": "pv3-a6ac6528-e8c8-44eb-b6f9-8521963518dc",
                            "institutionConsentId": "sdp-1-27a192bb-482f-4731-989b-e7271661248c",
                            "paymentIdempotencyId": "4289457hd38djoa783jw9qag3",
                            "paymentLifecycleId": "3gaq9wj387aojd83dh7549824",
                            "status": "COMPLETED",
                            "statusDetails": {
                              "status": "COMPLETED",
                              "statusUpdateDate": "2021-06-10T11:26:54.887Z",
                              "isoStatus": {
                                "code": "ACSC",
                                "name": "AcceptedSettlementCompleted"
                              }
                            },
                            "payeeDetails": {
                              "name": "Jane Doe",
                              "accountIdentifications": [
                                {
                                  "type": "ACCOUNT_NUMBER",
                                  "identification": "12345678"
                                },
                                {
                                  "type": "SORT_CODE",
                                  "identification": "123456"
                                }
                              ]
                            },
                            "reference": "Bill Payment",
                            "amount": 1.00,
                            "currency": "GBP",
                            "amountDetails": {
                              "amount": 1.00,
                              "currency": "GBP"
                            },
                            "createdAt": "2021-06-10T11:26:54.887Z"
                          }
                        ]
                      }
                    }
                  },
                  "UK Bulk Payment Example Response": {
                    "description": "UK Bulk Payment Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "a63d57d771d64875a8230a1fcabd87f2"
                      },
                      "data": {
                        "payments": [
                          {
                            "id": "pv3-a1e2ecb0-270c-42e2-8ba5-005261b629d2",
                            "institutionConsentId": "sdp-6-b06f9a82-c641-4aba-b76d-43e6bc052f75",
                            "status": "COMPLETED",
                            "statusDetails": {
                              "status": "COMPLETED",
                              "statusUpdateDate": "2021-06-09T13:53:28.67Z"
                            },
                            "createdAt": "2021-06-09T13:53:28.67Z",
                            "bulkAmountSum": 7
                          }
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfPaymentResponses"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Payment Details",
        "tags": [
          "Payments"
        ]
      }
    },
    "/pre-auth-requests": {
      "post": {
        "description": "Used to initiate the pre-authorisation process for any `Institution` that contains the `INITIATE_PRE_AUTHORISATION` feature to authenticate the user. <br><br>Feature: `INITIATE_PRE_AUTHORISATION`",
        "operationId": "createPreAuthorisationRequest",
        "parameters": [
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "Berlin Group (AIS) Example Request": {
                  "description": "Berlin Group (AIS) Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "n26",
                    "callback": "https://display-parameters.com/",
                    "scope": "AIS"
                  }
                },
                "Berlin Group (PIS) Example Request": {
                  "description": "Berlin Group (PIS) Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "n26",
                    "callback": "https://display-parameters.com/",
                    "scope": "PIS"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/PreAuthorisationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Berlin Group Example (AIS) Response": {
                    "description": "Berlin Group Example (AIS) Response",
                    "value": {
                      "meta": {
                        "tracingId": "8acb66e6a9e142e79acc3ccf6cc03e04"
                      },
                      "data": {
                        "id": "73064bb9-c84d-4242-897c-4150aacfa658",
                        "userUuid": "e2578545-27a4-4edf-983f-5d33c2d7b559",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "n26",
                        "state": "1575102ed5664761bce34927f0caa50f",
                        "status": "AWAITING_PRE_AUTHORIZATION",
                        "createdAt": "2021-05-11T13:03:43.619Z",
                        "featureScope": [
                          "INITIATE_PRE_AUTHORISATION"
                        ],
                        "authorisationUrl": "https://app.n26.com/open-banking?requestId=9ae856ce-6b10-4956-8da8-c66ee0c9d86f&state=1575102ed5664761bce34927f0caa50f&authType=XS2A&scope=DEDICATED_AISP",
                        "qrCodeUrl": "https://images.yapily.com/image/f86d382b-c00a-4650-8d0d-9ee6ba1093cd/1620738225?size=0"
                      }
                    }
                  },
                  "Berlin Group Example (PIS) Response": {
                    "description": "Berlin Group Example (PIS) Response",
                    "value": {
                      "meta": {
                        "tracingId": "ba79c56773de42129dbf8164b202276c"
                      },
                      "data": {
                        "id": "53ff00d0-91dd-417d-880b-cdd7c50090ed",
                        "userUuid": "e2578545-27a4-4edf-983f-5d33c2d7b559",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "n26",
                        "state": "4399535ee4de46238fce108a95669848",
                        "status": "AWAITING_PRE_AUTHORIZATION",
                        "createdAt": "2021-06-10T09:54:46.669Z",
                        "featureScope": [
                          "INITIATE_PRE_AUTHORISATION"
                        ],
                        "authorisationUrl": "https://app.n26.com/open-banking?requestId=2e2b2efd-82bb-4a2b-8f67-ced1a93511b8&state=4399535ee4de46238fce108a95669848&authType=XS2A&scope=DEDICATED_PISP",
                        "qrCodeUrl": "https://images.yapily.com/image/7384ad3b-5eb1-4304-9cfa-7aa6fcc5e0c7/1623318888?size=0"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfAuthorisationRequestResponse"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Create Pre-authorisation",
        "tags": [
          "Authorisations"
        ]
      }
    },
    "/payment-pre-auth-requests": {
      "post": {
        "description": "Used to initiate the pre-authorisation process for payments for CbiGlobe `Institution` that contains the `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS` feature to authenticate the user. <br><br>Feature: `INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS`",
        "operationId": "createPaymentPreAuthorisationRequest",
        "parameters": [
          {
            "description": "__Optional__. Used to obtain the raw request and response to and from the <code>Institution</code>.",
            "in": "query",
            "name": "raw",
            "required": false,
            "schema": {
              "type": "boolean"
            }
          }
        ],
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "Cbi Globe (PIS) Example Request": {
                  "description": "Cbi Globe (PIS) Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com",
                    "institutionId": "n26",
                    "callback": "https://display-parameters.com/",
                    "scope": "PIS",
                    "reference": "Bill Payment",
                    "amount": {
                      "amount": 1.00,
                      "currency": "EUR"
                    },
                    "payee": {
                      "name": "Jane Doe",
                      "country": "BE",
                      "accountIdentifications": [
                        {
                          "type": "IBAN",
                          "identification": "BE12345678901234"
                        }
                      ]
                    },
                    "payer": {
                      "accountIdentifications": [
                        {
                          "type": "IBAN",
                          "identification": "DE12345678901234567890"
                        }
                      ]
                    }
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/PaymentPreAuthorisationRequest"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Berlin Group Example (PIS) Response": {
                    "description": "Berlin Group Example (PIS) Response",
                    "value": {
                      "meta": {
                        "tracingId": "ba79c56773de42129dbf8164b202276c"
                      },
                      "data": {
                        "id": "53ff00d0-91dd-417d-880b-cdd7c50090ed",
                        "userUuid": "e2578545-27a4-4edf-983f-5d33c2d7b559",
                        "applicationUserId": "john.doe@company.com",
                        "institutionId": "n26",
                        "state": "4399535ee4de46238fce108a95669848",
                        "status": "AWAITING_PRE_AUTHORIZATION",
                        "createdAt": "2021-06-10T09:54:46.669Z",
                        "featureScope": [
                          "INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS"
                        ],
                        "authorisationUrl": "https://app.n26.com/open-banking?requestId=2e2b2efd-82bb-4a2b-8f67-ced1a93511b8&state=4399535ee4de46238fce108a95669848&authType=XS2A&scope=DEDICATED_PISP",
                        "qrCodeUrl": "https://images.yapily.com/image/7384ad3b-5eb1-4304-9cfa-7aa6fcc5e0c7/1623318888?size=0"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfAuthorisationRequestResponse"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Create Payment Pre-authorisation",
        "tags": [
          "Authorisations"
        ]
      }
    },
    "/users": {
      "get": {
        "description": "Get all the users configured in your application",
        "operationId": "getUsers",
        "parameters": [
          {
            "description": "__Optional__. Filter records based on the list of `applicationUserId` users provided.",
            "in": "query",
            "name": "filter[applicationUserId]",
            "required": false,
            "schema": {
              "uniqueItems": true,
              "type": "array",
              "items": {
                "type": "string"
              }
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": [
                      {
                        "uuid": "3b908179-6faa-42e1-8129-8fd0ff1fc68f",
                        "applicationUuid": "3020bf54-e254-40ba-ba7b-fc959774486a",
                        "applicationUserId": "bojack@9tees.com",
                        "institutionConsents": [
                          {
                            "institutionId": "modelo-sandbox"
                          }
                        ]
                      },
                      {
                        "uuid": "be7dd6fa-1236-41b6-a7a1-5d7863ab9553",
                        "applicationUuid": "3020bf54-e254-40ba-ba7b-fc959774486a",
                        "referenceId": "hollyhock@9tees.com",
                        "institutionConsents": [
                          {
                            "institutionId": "mock-sandbox"
                          }
                        ]
                      },
                      {
                        "uuid": "deb9aac1-b0bc-4f40-9c0b-6a675cf6646f",
                        "applicationUuid": "3020bf54-e254-40ba-ba7b-fc959774486a",
                        "referenceId": "beatrice@9tees.com",
                        "institutionConsents": [
                          {
                            "institutionId": "yapily-mock"
                          }
                        ]
                      }
                    ]
                  }
                },
                "schema": {
                  "type": "array",
                  "items": {
                    "$ref": "#/components/schemas/ApplicationUser"
                  }
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get Users",
        "tags": [
          "Users"
        ]
      },
      "post": {
        "description": "Create a new user in your application",
        "operationId": "addUser",
        "requestBody": {
          "content": {
            "application/json;charset=UTF-8": {
              "examples": {
                "Create User Example Request": {
                  "description": "Create User Example Request",
                  "value": {
                    "applicationUserId": "john.doe@company.com"
                  }
                }
              },
              "schema": {
                "$ref": "#/components/schemas/NewApplicationUser"
              }
            }
          },
          "required": true
        },
        "responses": {
          "201": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "uuid": "1ec8e814-085e-46ad-a303-3fe11808f67e",
                      "applicationUuid": "50935110-c7df-4003-a06a-1cc5fd4643c9",
                      "applicationUserId": "john.doe@company.com",
                      "institutionConsents": []
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUser"
                }
              }
            },
            "description": "Created"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Create User",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{userUuid}": {
      "delete": {
        "description": "Delete a user from your application along with any sub-resources (including consent resources on institution APIs if they exist)",
        "operationId": "deleteUser",
        "parameters": [
          {
            "description": "__Mandatory__. The Yapily generated UUID for the user.",
            "in": "path",
            "name": "userUuid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "meta": {
                        "tracingId": "e6625041a9fb46e2a450b3f9f1528cb8"
                      },
                      "data": {
                        "id": "b8ebe390-f6fb-45b5-bf20-1b4436644390",
                        "deleteStatus": "SUCCESS",
                        "creationDate": "2021-06-07T16:44:52.221Z",
                        "userConsents": [
                          {
                            "institutionId": "modelo-sandbox"
                          }
                        ]
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseOfUserDeleteResponse"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Delete User",
        "tags": [
          "Users"
        ]
      },
      "get": {
        "description": "Get a specific user using the user UUID",
        "operationId": "getUser",
        "parameters": [
          {
            "description": "__Mandatory__. The Yapily generated UUID for the user.",
            "in": "path",
            "name": "userUuid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Example Response": {
                    "description": "Example Response",
                    "value": {
                      "uuid": "3b908179-6faa-42e1-8129-8fd0ff1fc68f",
                      "applicationUuid": "3020bf54-e254-40ba-ba7b-fc959774486a",
                      "applicationUserId": "bojack@9tees.com",
                      "institutionConsents": [
                        {
                          "institutionId": "modelo-sandbox"
                        }
                      ]
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApplicationUser"
                }
              }
            },
            "description": "Ok"
          },
          "default": {
            "content": {
              "application/json;charset=UTF-8": {
                "examples": {
                  "Error Response": {
                    "description": "Error Response",
                    "value": {
                      "error": {
                        "code": 401,
                        "status": "UNAUTHORIZED",
                        "message": "Full authentication is required to access this resource"
                      }
                    }
                  }
                },
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            },
            "description": "Error Response"
          }
        },
        "summary": "Get User",
        "tags": [
          "Users"
        ]
      }
    },
    "/users/{userUuid}/profile/consents": {
      "post": {
        "tags": [
          "Financial Profile"
        ],
        "operationId": "createProfileConsent",
        "summary": "Create Profile Consent",
        "description": "Used to add a consent to a `Financial Profile` for a `User`.  The response is asynchronous, returned with pending status, while retrieval of financial data is commenced.  There is a limit of 10,000 transactions for enrichment.",
        "parameters": [
          {
            "description": "__Mandatory__. The Yapily generated UUID for the user.",
            "in": "path",
            "name": "userUuid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "consent",
            "in": "header",
            "description": "__Mandatory__. The `consent-token` obtained from the original authorisation.",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response, returning a ProfileConsent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileConsent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.  Returned if the userUuid is not a valid UUID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "401": {
            "description": "Either authentication credentials were not supplied, or they were invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.  Returned if the userUuid is not found for the `Application`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userUuid}/profile/consents/{profileConsentId}": {
      "get": {
        "tags": [
          "Financial Profile"
        ],
        "operationId": "getProfileConsent",
        "summary": "Get Profile Consent",
        "description": "Used to retreive a specific ProfileConsent for a User.",
        "parameters": [
          {
            "description": "__Mandatory__. The Yapily generated UUID for the user.",
            "in": "path",
            "name": "userUuid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "profileConsentId",
            "in": "path",
            "description": "__Mandatory__. The ID of the ProfileConsent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response, returning a ProfileConsent.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ProfileConsent"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.  Returned if the userUuid is not a valid UUID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "401": {
            "description": "Either authentication credentials were not supplied, or they were invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.  Returned if the userUuid or ProfileConsent is not found for the `Application`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        }
      },
      "delete": {
        "tags": [
          "Financial Profile"
        ],
        "operationId": "deleteProfileConsent",
        "summary": "Delete Profile Consent",
        "description": "Used to delete a `ProfileConsent` for a `User`. This will remove the consent and all associated financial data from the 'Financial Profile'.",
        "parameters": [
          {
            "description": "__Mandatory__. The Yapily generated UUID for the user.",
            "in": "path",
            "name": "userUuid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          },
          {
            "name": "profileConsentId",
            "in": "path",
            "description": "__Mandatory__. The ID of the ProfileConsent",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "The ProfileConsent was deleted."
          },
          "400": {
            "description": "Bad Request.  Returned if the userUuid is not a valid UUID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "401": {
            "description": "Either authentication credentials were not supplied, or they were invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.  Returned if the userUuid or ProfileConsent is not found for the `Application`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        }
      }
    },
    "/users/{userUuid}/profile": {
      "get": {
        "tags": [
          "Financial Profile"
        ],
        "operationId": "getUserProfile",
        "summary": "Get User Profile",
        "description": "Used to retrieve a `FinancialProfile` for a `User`.  Status will be `PENDING` until all ProfileConsents are `COMPLETED`.",
        "parameters": [
          {
            "description": "__Mandatory__. The Yapily generated UUID for the user.",
            "in": "path",
            "name": "userUuid",
            "required": true,
            "schema": {
              "type": "string",
              "format": "uuid"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "A successful response, returning a FinancialProfile.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FinancialProfile"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request.  Returned if the userUuid is not a valid UUID.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "401": {
            "description": "Either authentication credentials were not supplied, or they were invalid.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          },
          "404": {
            "description": "Not Found.  Returned if the userUuid is not found for the `Application`.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ApiResponseError"
                }
              }
            }
          }
        }
      }
    }
  },
  "components": {
    "schemas": {
      "Account": {
        "type": "object",
        "properties": {
          "id": {
            "description": "Account Id returned by the institution if present",
            "type": "string"
          },
          "type": {
            "type": "string"
          },
          "description": {
            "description": "Product name as defined by the financial institution for this account",
            "type": "string"
          },
          "balance": {
            "type": "number"
          },
          "currency": {
            "description": "ISO 4217 currency code",
            "type": "string"
          },
          "usageType": {
            "$ref": "#/components/schemas/UsageType"
          },
          "accountType": {
            "$ref": "#/components/schemas/AccountType"
          },
          "nickname": {
            "description": "Name of the account as defined by the financial institution or the end user",
            "type": "string"
          },
          "details": {
            "description": "Specifications that might be provided by the institution\n - characteristics of the account\n- characteristics of the relevant card",
            "type": "string"
          },
          "accountNames": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountName"
            }
          },
          "accountIdentifications": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountIdentification"
            }
          },
          "accountBalances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountBalance"
            }
          }
        }
      },
      "AccountApiListResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseListMeta"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/FilteredClientPayloadListAccount"
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "ApiResponseOfAccount": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "data": {
            "$ref": "#/components/schemas/Account"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "AccountAuthorisationRequest": {
        "required": [
          "institutionId"
        ],
        "type": "object",
        "properties": {
          "userUuid": {
            "type": "string",
            "format": "uuid"
          },
          "applicationUserId": {
            "type": "string",
            "description": "__Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.",
            "example": "user-234562290"
          },
          "forwardParameters": {
            "description": "Extra parameters the TPP may want to get forwarded in the callback request after the PSU redirect.",
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "institutionId": {
            "type": "string",
            "description": "__Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.",
            "example": "yapily-mock"
          },
          "callback": {
            "type": "string",
            "description": "__Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-optional) for more information.",
            "example": "https://display-parameters.com"
          },
          "redirect": {
            "$ref": "#/components/schemas/RedirectRequest"
          },
          "oneTimeToken": {
            "type": "boolean",
            "description": "__Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-with-an-ott-optional) for more information.",
            "example": false
          },
          "accountRequest": {
            "$ref": "#/components/schemas/AccountRequest"
          }
        },
        "description": "The request body containing an `AccountAuthorisationRequest` json payload"
      },
      "AccountBalance": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AccountBalanceType"
          },
          "dateTime": {
            "type": "string",
            "format": "date-time"
          },
          "balanceAmount": {
            "$ref": "#/components/schemas/Amount"
          },
          "creditLineIncluded": {
            "type": "boolean"
          },
          "creditLines": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/CreditLine"
            }
          }
        }
      },
      "AccountEmbeddedAuthorisationRequest": {
        "required": [
          "institutionId"
        ],
        "type": "object",
        "properties": {
          "userUuid": {
            "type": "string",
            "format": "uuid"
          },
          "applicationUserId": {
            "type": "string",
            "description": "__Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.",
            "example": "user-234562290"
          },
          "forwardParameters": {
            "type": "array",
            "description": "Extra parameters the TPP may want to get forwarded in the callback request after the PSU redirect.",
            "items": {
              "type": "string"
            }
          },
          "institutionId": {
            "type": "string",
            "description": "__Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.",
            "example": "yapily-mock"
          },
          "callback": {
            "type": "string",
            "description": "__Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-optional) for more information.",
            "example": "https://display-parameters.com"
          },
          "redirect": {
            "$ref": "#/components/schemas/RedirectRequest"
          },
          "oneTimeToken": {
            "type": "boolean",
            "description": "__Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-with-an-ott-optional) for more information.",
            "example": false
          },
          "userCredentials": {
            "$ref": "#/components/schemas/UserCredentials"
          },
          "selectedScaMethod": {
            "$ref": "#/components/schemas/ScaMethod"
          },
          "scaCode": {
            "type": "string",
            "description": "__Conditional__. Used to update the authorisation with the sca code received by the user from the `Institution` using the embedded account authorisation flow.<br><br>This is the penultimate step required in the embedded account authorisation flow to authorise the `Consent`. After sending the sca code, to obtain an authorised consent, the last step is to poll [Get Consent](https://docs.yapily.com/api/#get-consent) until the `Institution` authorises the request and the `Consent` `status` transitions to `AUTHORIZED`.",
            "example": "325614"
          },
          "accountRequest": {
            "$ref": "#/components/schemas/AccountRequest"
          }
        },
        "description": "The request body containing an `AccountEmbeddedAuthorisationRequest` json payload"
      },
      "AccountIdentification": {
        "required": [
          "type",
          "identification"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AccountIdentificationType"
          },
          "identification": {
            "type": "string",
            "description": "__Mandatory__. The value associated with the account identification type.<br><br> See [Account Identification Combinations](https://docs.yapily.com/guides/payments/payment-execution/#account-identifications-combinations) for more information on the format of the values.",
            "example": "401016"
          }
        },
        "description": "__Mandatory__. The `AccountIdentification` object for the user's account identifications for the account"
      },
      "AccountInfo": {
        "required": [
          "accountId",
          "accountIdentification"
        ],
        "type": "object",
        "properties": {
          "accountId": {
            "type": "string",
            "description": "__Mandatory__. The `Institution` account identifier for the account",
            "example": "500000000000000000000001"
          },
          "accountIdentification": {
            "$ref": "#/components/schemas/AccountIdentification"
          }
        },
        "description": "__Conditional__. Used to create a request for the balance of the account specified. Once the user authorises the request, only the balance can be obtained by executing [GET Account Balances](./#get-account-balances).<br><br> This can be specified in conjunction with `accountIdentifiersForTransaction` to generate a `Consent` that can both access the accounts balance and transactions."
      },
      "AccountName": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          }
        }
      },
      "AccountRequest": {
        "type": "object",
        "properties": {
          "transactionFrom": {
            "type": "string",
            "description": "__Optional__. Used to specify the lower bound on when to pull transaction. This should be declared when accessing transaction older than 90 days for banks in the [CBI Globe](https://docs.yapily.com/knowledge/cbi_globe).",
            "format": "date-time",
            "example": "2020-01-01T00:00:00Z"
          },
          "transactionTo": {
            "type": "string",
            "description": "__Optional__. Used to specify the upper bound on when to pull transaction",
            "format": "date-time",
            "example": "2021-01-01T00:00:00Z"
          },
          "expiresAt": {
            "type": "string",
            "description": "__Optional__. Used to set a hard date for when the user's associated `Consent` will expire.<br><br>**Note**: If this supported by the bank, specifying this is property is opting out of having a long-lived consent that can be perpetually re-authorised by the user. This will add an `expiresAt` field on the `Consent` object which will render it unusable after this date.<br><br>**Note**: This is not supported by every `Institution`. In such case, the request will not fail but the property will be ignored and the created `Consent` will not have an expiry date.",
            "format": "date-time",
            "example": "2025-01-01T00:00:00Z"
          },
          "accountIdentifiers": {
            "$ref": "#/components/schemas/AccountInfo"
          },
          "accountIdentifiersForTransaction": {
            "type": "array",
            "description": "__Conditional__. Used to create a request for the transactions of the account specified. Once the user authorises the request, only the transactions can be obtained by executing [GET Account Transactions](./#get-account-transactions). <br><br>This can be specified in conjunction with `accountIdentifiersForBalance` to generate a `Consent` that can both access the accounts balance and transactions.",
            "items": {
              "$ref": "#/components/schemas/AccountInfo"
            }
          },
          "accountIdentifiersForBalance": {
            "type": "array",
            "description": "__Conditional__. Used to create a request for the balance of the account specified. Once the user authorises the request, only the balance can be obtained by executing [GET Account Balances](./#get-account-balances).<br><br> This can be specified in conjunction with `accountIdentifiersForTransaction` to generate a `Consent` that can both access the accounts balance and transactions.",
            "items": {
              "$ref": "#/components/schemas/AccountInfo"
            }
          },
          "featureScope": {
            "uniqueItems": true,
            "type": "array",
            "description": "__Optional__. Used to granularly specify the set of features that the user will give their consent for when requesting access to their account information. Depending on the `Institution`, this may also populate a consent screen which list these scopes before the user authorises.<br><br>This endpoint accepts allow all [Financial Data Features](/guides/financial-data/features/#feature-list) that the `Institution` supports.To find out which scopes an `Institution` supports, check [GET Institution](./#get-institution).",
            "items": {
              "$ref": "#/components/schemas/FeatureEnum"
            }
          }
        },
        "description": "__Conditional__. Used to further specify details of the `Consent` to request <br><br>Conditions:<ol><li>Mandatory to access balance/transaction data for an `Institution` within the [CBI Globe](https://docs.yapily.com/knowledge/cbi_globe)</li><li>Mandatory to specify the individual scopes to request from the user at the `Institution` for an account authorisation</li><li>Mandatory to specify an expiry time on the created `Consent` at which time will render it unusable</li><li>Mandatory to specify the date range that the created `Consent` will be able to access transactions for (given the range is support for the `Institution`)</li></ol>"
      },
      "AccountStatement": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "startDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "endDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "creationDateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "AccountBalanceType": {
        "type": "string",
        "enum": [
          "CLOSING_AVAILABLE",
          "CLOSING_BOOKED",
          "CLOSING_CLEARED",
          "EXPECTED",
          "FORWARD_AVAILABLE",
          "INFORMATION",
          "INTERIM_AVAILABLE",
          "INTERIM_BOOKED",
          "INTERIM_CLEARED",
          "OPENING_AVAILABLE",
          "OPENING_BOOKED",
          "OPENING_CLEARED",
          "PREVIOUSLY_CLOSED_BOOKED",
          "AUTHORISED",
          "OTHER",
          "UNKNOWN"
        ]
      },
      "AccountIdentificationType": {
        "type": "string",
        "description": "__Mandatory__. Used to describe the format of the account.<br><br> See [Account Identification Combinations](https://docs.yapily.com/guides/payments/payment-execution/#account-identifications-combinations) for more information on when to specify each type.",
        "example": "SORT_CODE",
        "enum": [
          "SORT_CODE",
          "ACCOUNT_NUMBER",
          "IBAN",
          "BBAN",
          "BIC",
          "PAN",
          "MASKED_PAN",
          "MSISDN",
          "BSB",
          "NCC",
          "ABA",
          "ABA_WIRE",
          "ABA_ACH",
          "EMAIL",
          "ROLL_NUMBER"
        ]
      },
      "ApiResponseOfAccountStatement": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "data": {
            "$ref": "#/components/schemas/AccountStatement"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "ApiListResponseOfAccountStatement": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseListMeta"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountStatement"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/FilteredClientPayloadListAccountStatement"
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "AccountType": {
        "type": "string",
        "enum": [
          "CASH_TRADING",
          "CASH_INCOME",
          "CASH_PAYMENT",
          "CHARGE_CARD",
          "CHARGES",
          "COMMISSION",
          "CREDIT_CARD",
          "CURRENT",
          "E_MONEY",
          "LIMITED_LIQUIDITY_SAVINGS_ACCOUNT",
          "LOAN",
          "MARGINAL_LENDING",
          "MONEY_MARKET",
          "MORTGAGE",
          "NON_RESIDENT_EXTERNAL",
          "OTHER",
          "OVERDRAFT",
          "OVERNIGHT_DEPOSIT",
          "PREPAID_CARD",
          "SALARY",
          "SAVINGS",
          "SETTLEMENT",
          "TAX",
          "UNKNOWN"
        ]
      },
      "Address": {
        "type": "object",
        "properties": {
          "addressLines": {
            "type": "array",
            "description": "__Optional__. The address line of the address",
            "example": "Ardenham Court",
            "items": {
              "type": "string"
            }
          },
          "streetName": {
            "type": "string",
            "description": "__Optional__. The street name of the address",
            "example": "Oxford Road"
          },
          "buildingNumber": {
            "type": "string",
            "description": "__Optional__. The building number of the address",
            "example": "45"
          },
          "postCode": {
            "type": "string",
            "description": "__Optional__. The post code of the address",
            "example": "HP19 3EQ"
          },
          "townName": {
            "type": "string",
            "description": "__Optional__. The town name of the address",
            "example": "Aylesbury"
          },
          "county": {
            "type": "array",
            "description": "__Optional__. The list of counties for the address",
            "example": "Buckinghamshire",
            "items": {
              "type": "string"
            }
          },
          "country": {
            "type": "string",
            "description": "__Conditional__. The 2-letter country code for the address. <br><br>An `Institution` may require you to specify the `country` when used in the context of the `Payee` to be able to make a payment",
            "example": "GB"
          },
          "department": {
            "type": "string",
            "description": "__Optional__. The department for the address",
            "example": "Unit 2"
          },
          "subDepartment": {
            "type": "string",
            "description": "__Optional__. The sub-department for the address",
            "example": "Floor 3"
          },
          "addressType": {
            "$ref": "#/components/schemas/AddressTypeEnum"
          }
        },
        "description": "__Conditional__. The address of the `Payee` or `Payer`.<ul><li>`payee.address` is mandatory when the `paymentType` is an `INTERNATIONAL` payment</li><li>An `Institution` may require you to specify the `country` when used in the context ofthe `Payee` to be able to make a payment.</li></ul>",
        "example": {
          "country": "GB"
        }
      },
      "AddressDetails": {
        "type": "object",
        "properties": {
          "addressLine": {
            "type": "string"
          }
        }
      },
      "AddressTypeEnum": {
        "type": "string",
        "description": "__Optional__. The type of address",
        "enum": [
          "BUSINESS",
          "CORRESPONDENCE",
          "DELIVERY_TO",
          "MAIL_TO",
          "PO_BOX",
          "POSTAL",
          "RESIDENTIAL",
          "STATEMENT",
          "UNKNOWN"
        ]
      },
      "Amount": {
        "required": [
          "amount",
          "currency"
        ],
        "type": "object",
        "properties": {
          "amount": {
            "type": "number",
            "description": "__Mandatory__. The monetary value",
            "example": 10
          },
          "currency": {
            "type": "string",
            "description": "__Mandatory__. The [ISO 4217](https://www.xe.com/iso4217.php) currency code",
            "example": "GBP"
          }
        },
        "description": "__Mandatory__. The `Amount` object that contains the amount and currency of the payment."
      },
      "ApiCall": {
        "type": "object"
      },
      "ApiError": {
        "type": "object",
        "properties": {
          "code": {
            "type": "integer",
            "format": "int32"
          },
          "institutionError": {
            "$ref": "#/components/schemas/InstitutionError"
          },
          "message": {
            "type": "string"
          },
          "source": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "tracingId": {
            "type": "string"
          }
        }
      },
      "ApiResponseError": {
        "type": "object",
        "properties": {
          "error": {
            "$ref": "#/components/schemas/ApiError"
          },
          "monitoring": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/MonitoringEndpointStatus"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          }
        },
        "description": "Used to return errors from the bank from each request<ul><li>`400` - Returned by any `POST` endpoint when the body does not conform to the contract</li><li>`401` - Returned by any endpoint when an invalid `authToken` is used for authentication</li><li>`403` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the `Consent` is no longer authorised to access financial data or to make a payment</li><li>`404` - Returned by any endpoint where there are path parameters and the path parameters supplied are unable to find the desired resource</li><li>`409` - Returned by any `POST` endpoint when creating a resource that conflicts with any other existing resource e.g. [Create User](https://docs.yapily.com/api/#create-user)</li><li>`424` - Returned by any [Financial Data](https://docs.yapily.com/api/#yapily-api-financial-data) and any [Payments](https://docs.yapily.com/api/#yapily-api-payments) endpoint when the feature to be accessed is not supported by the `Institution`.</li><li>`500` - Returned by any endpoint when Yapily is down. If you encounter any false positives, please <a href=\"mailto:support@yapily.com\">notify us</a></li></ul>",
        "example": {
          "error": {
            "tracingId": "74b13ce8ed51419f92c5d609e04532de",
            "code": 424,
            "institutionError": {
              "errorMessage": "{\"Code\":\"500 Internal Server Error\",\"Id\":\"5ff8d331-4282-41e0-b5ef-1ac9ac39f009\",\"Message\":\"Technical Error. Please try again later\",\"Errors\":[{\"ErrorCode\":\"UK.OBIE.UnexpectedError\",\"Message\":\"There was a problem processing your request. Please try again later\"}]}",
              "httpStatusCode": 500
            },
            "source": "INSTITUTION",
            "status": "FAILED_DEPENDENCY"
          },
          "monitoring": []
        }
      },
      "Application": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "name": {
            "type": "string"
          },
          "active": {
            "type": "boolean"
          },
          "authCallbacks": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "institutions": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Institution"
            }
          },
          "media": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Media"
            }
          },
          "created": {
            "type": "string",
            "format": "date-time"
          },
          "updated": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApplicationUser": {
        "type": "object",
        "properties": {
          "uuid": {
            "type": "string",
            "format": "uuid"
          },
          "applicationUuid": {
            "type": "string",
            "format": "uuid"
          },
          "applicationUserId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "institutionConsents": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/InstitutionConsent"
            }
          }
        }
      },
      "AuthorisationEmbeddedRequestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userUuid": {
            "type": "string",
            "format": "uuid"
          },
          "applicationUserId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "institutionId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "$ref": "#/components/schemas/AuthorisationStatus"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "transactionFrom": {
            "type": "string",
            "format": "date-time"
          },
          "transactionTo": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "timeToExpireInMillis": {
            "type": "integer",
            "format": "int64",
            "deprecated": true
          },
          "timeToExpire": {
            "type": "string",
            "format": "iso8601"
          },
          "featureScope": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureEnum"
            }
          },
          "consentToken": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "authorizedAt": {
            "type": "string",
            "format": "date-time"
          },
          "institutionConsentId": {
            "type": "string"
          },
          "authorisationUrl": {
            "type": "string"
          },
          "qrCodeUrl": {
            "type": "string"
          },
          "scaMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScaMethod"
            }
          },
          "selectedScaMethod": {
            "$ref": "#/components/schemas/ScaMethod"
          }
        }
      },
      "ApiResponseOfAuthorisationEmbeddedRequestResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "data": {
            "$ref": "#/components/schemas/AuthorisationEmbeddedRequestResponse"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "AuthorisationRequestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userUuid": {
            "type": "string",
            "format": "uuid"
          },
          "applicationUserId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "institutionId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "$ref": "#/components/schemas/AuthorisationStatus"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "transactionFrom": {
            "type": "string",
            "format": "date-time"
          },
          "transactionTo": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "timeToExpireInMillis": {
            "type": "integer",
            "format": "int64",
            "deprecated": true
          },
          "timeToExpire": {
            "type": "string",
            "format": "iso8601"
          },
          "featureScope": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureEnum"
            }
          },
          "consentToken": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "authorizedAt": {
            "type": "string",
            "format": "date-time"
          },
          "institutionConsentId": {
            "type": "string"
          },
          "authorisationUrl": {
            "type": "string"
          },
          "qrCodeUrl": {
            "type": "string"
          }
        }
      },
      "AuthorisationStatus": {
        "type": "string",
        "enum": [
          "AWAITING_AUTHORIZATION",
          "AWAITING_FURTHER_AUTHORIZATION",
          "AWAITING_RE_AUTHORIZATION",
          "AUTHORIZED",
          "CONSUMED",
          "REJECTED",
          "REVOKED",
          "FAILED",
          "EXPIRED",
          "UNKNOWN",
          "INVALID",
          "AWAITING_DECOUPLED_PRE_AUTHORIZATION",
          "AWAITING_PRE_AUTHORIZATION",
          "PRE_AUTHORIZED",
          "AWAITING_DECOUPLED_AUTHORIZATION",
          "AWAITING_SCA_METHOD",
          "AWAITING_SCA_CODE"
        ]
      },
      "ApiResponseOfAuthorisationRequestResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "data": {
            "$ref": "#/components/schemas/AuthorisationRequestResponse"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "TransactionBalance": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/AccountBalanceType"
          },
          "balanceAmount": {
            "$ref": "#/components/schemas/Amount"
          }
        }
      },
      "Balances": {
        "type": "object",
        "properties": {
          "mainBalanceAmount": {
            "$ref": "#/components/schemas/Amount"
          },
          "balances": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountBalance"
            }
          }
        }
      },
      "ApiResponseOfBalances": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "data": {
            "$ref": "#/components/schemas/Balances"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "Beneficiary": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "reference": {
            "type": "string"
          },
          "payee": {
            "$ref": "#/components/schemas/BeneficiaryPayee"
          },
          "trusted": {
            "type": "boolean"
          }
        }
      },
      "BeneficiaryPayee": {
        "description": "__Mandatory__. The `BeneficiaryPayee` object contains details of the beneficiary [person or business]. You must define this in your payment request along with all of the nested mandatory properties.",
        "required": [
          "accountIdentifications"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "The account holder name of the beneficiary.",
            "example": "Jane Doe"
          },
          "accountIdentifications": {
            "type": "array",
            "description": "__Mandatory__. The account identifications that identify the `BeneficiaryPayee` bank account.",
            "example": [
              {
                "identification": "401016",
                "type": "SORT_CODE"
              },
              {
                "identification": "71518920",
                "type": "ACCOUNT_NUMBER"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/AccountIdentification"
            },
            "uniqueItems": true
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        }
      },
      "ApiListResponseOfBeneficiary": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseListMeta"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Beneficiary"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "BulkPaymentAuthorisationRequest": {
        "required": [
          "institutionId"
        ],
        "type": "object",
        "properties": {
          "userUuid": {
            "type": "string",
            "format": "uuid",
            "description": "__Conditional__. The reference to the `User` that will authorise the authorisation request using the Yapily generated UUID. Either the `userUuid` or `applicationUserId` must be provided.",
            "example": "e006a012-c306-4355-a6a1-99bf69ae5171"
          },
          "applicationUserId": {
            "type": "string",
            "description": "__Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.",
            "example": "user-234562290"
          },
          "forwardParameters": {
            "type": "array",
            "description": "Extra parameters the TPP may want to get forwarded in the callback request after the PSU redirect.",
            "items": {
              "type": "string"
            }
          },
          "institutionId": {
            "type": "string",
            "description": "__Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.",
            "example": "yapily-mock"
          },
          "callback": {
            "type": "string",
            "description": "__Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-optional) for more information.",
            "example": "https://display-parameters.com"
          },
          "redirect": {
            "$ref": "#/components/schemas/RedirectRequest"
          },
          "oneTimeToken": {
            "type": "boolean",
            "description": "__Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-with-an-ott-optional) for more information.",
            "example": false
          },
          "paymentRequest": {
            "$ref": "#/components/schemas/BulkPaymentRequest"
          }
        }
      },
      "BulkPaymentEmbeddedAuthorisationRequest": {
        "required": [
          "institutionId"
        ],
        "type": "object",
        "properties": {
          "userUuid": {
            "type": "string",
            "format": "uuid",
            "description": "__Conditional__. The reference to the `User` that will authorise the authorisation request using the Yapily generated UUID. Either the `userUuid` or `applicationUserId` must be provided.",
            "example": "e006a012-c306-4355-a6a1-99bf69ae5171"
          },
          "applicationUserId": {
            "type": "string",
            "description": "__Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.",
            "example": "user-234562290"
          },
          "institutionId": {
            "type": "string",
            "description": "__Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.",
            "example": "yapily-mock"
          },
          "callback": {
            "type": "string",
            "description": "__Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-optional) for more information.",
            "example": "https://display-parameters.com"
          },
          "redirect": {
            "$ref": "#/components/schemas/RedirectRequest"
          },
          "oneTimeToken": {
            "type": "boolean",
            "description": "__Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-with-an-ott-optional) for more information.",
            "example": false
          },
          "paymentRequest": {
            "$ref": "#/components/schemas/BulkPaymentRequest"
          },
          "userCredentials": {
            "$ref": "#/components/schemas/UserCredentials"
          },
          "selectedScaMethod": {
            "$ref": "#/components/schemas/ScaMethod"
          },
          "scaCode": {
            "type": "string",
            "description": "__Conditional__. Used to update the authorisation with the sca code received by the user from the `Institution` using the embedded payment authorisation flow.<br><br>This is the penultimate step required in the embedded payment authorisation flow to authorise the `Consent`. After sending the sca code, to obtain an authorised consent, the last step is to poll [Get Consent](https://docs.yapily.com/api/#get-consent) until the `Institution` authorises the request and the `Consent` `status` transitions to `AUTHORIZED`.",
            "example": "325614"
          }
        },
        "description": "The request body containing a `BulkPaymentEmbeddedAuthorisationRequest` json payload"
      },
      "BulkPaymentRequest": {
        "required": [
          "payments"
        ],
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "description": "__Mandatory__. The array of `PaymentRequest` objects to initiate in the bulk payment.",
            "items": {
              "$ref": "#/components/schemas/PaymentRequest"
            }
          },
          "originatorIdentificationNumber": {
            "type": "string",
            "description": "__Conditional__. The identification number of the originator.<ul><li>Mandatory for AIB bulk payments</li></ul>"
          },
          "executionDateTime": {
            "type": "string",
            "description": "__Optional__. Used to schedule the bulk payment to be executed at a future date if supported by the `Institution`.",
            "format": "date-time"
          }
        },
        "description": "The payment request object defining the details of the bulk payment"
      },
      "Categorisation": {
        "type": "object",
        "properties": {
          "categories": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "source": {
            "type": "string"
          }
        }
      },
      "Category": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "subcategories": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Subcategory"
            }
          }
        }
      },
      "ApiListResponseOfCategory": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseListMeta"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/FilteredClientPayloadListCategory"
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "ChargeBearerType": {
        "type": "string",
        "description": "__Optional__. Specifies which party/parties will bear the charges associated with the processing of the payment transaction. Valid values are:<ul><li>`DEBT` - All transaction charges are to be borne by the debtor.</li><li>`CRED` - All transaction charges are to be borne by the creditor.</li><li>`SHAR` - In a credit transfer context, means that transaction charges on the sender side are to be borne by the debtor, transaction charges on the receiver side are to be borne by the creditor</li><li>`SLEV` - Charges are to be applied following the rules agreed in the service level and/or scheme.</li></ul>",
        "enum": [
          "DEBT",
          "CRED",
          "SHAR",
          "SLEV"
        ]
      },
      "PaymentChargeDetails": {
        "type": "object",
        "properties": {
          "chargeAmount": {
            "description": "Amount paid by charge bearer",
            "$ref": "#/components/schemas/Amount"
          },
          "chargeType": {
            "description": "Type of charge",
            "type": "string"
          },
          "chargeTo": {
            "description": "Charge bearer",
            "type": "string"
          }
        }
      },
      "Consent": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userUuid": {
            "type": "string",
            "format": "uuid"
          },
          "applicationUserId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "institutionId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "$ref": "#/components/schemas/AuthorisationStatus"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "transactionFrom": {
            "type": "string",
            "format": "date-time"
          },
          "transactionTo": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "timeToExpireInMillis": {
            "type": "integer",
            "format": "int64",
            "deprecated": true
          },
          "timeToExpire": {
            "type": "string",
            "format": "iso8601"
          },
          "featureScope": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureEnum"
            }
          },
          "consentToken": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "authorizedAt": {
            "type": "string",
            "format": "date-time"
          },
          "institutionConsentId": {
            "type": "string"
          }
        }
      },
      "ApiListResponseOfConsent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseListMeta"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Consent"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/FilteredClientPayloadListConsent"
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "ApiResponseOfConsent": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "data": {
            "$ref": "#/components/schemas/Consent"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "ConsentAuthCodeRequest": {
        "required": [
          "authCode",
          "authState"
        ],
        "type": "object",
        "properties": {
          "authCode": {
            "type": "string",
            "description": "__Mandatory__. The authorisation code",
            "example": "6b965fbb-ff09-4afa-b897-90c34797cb8f&id_token=eyJhbGciOiJQUzI1NiIsImtpZCI6InprYm9LRmpRUndCZDlVRW5QQzV3bHY1N2lnNCJ9.eyJzdWIiOiJzZHAtNi0xZjA1MjBiNC1mZmNkLTQ4OTgtYWVkMC0wYjU0Y2I2ZDkwM2QiLCJvcGVuYmFua2luZ19pbnRlbnRfaWQiOiJzZHAtNi0xZjA1MjBiNC1mZmNkLTQ4OTgtYWVkMC0wYjU0Y2I2ZDkwM2QiLCJwc3VfaWRlbnRpZmllcnMiOnsidXNlcklkIjoiNzAwMDAxMDAwMDAwMDAwMDAwMDAwMDAyIiwiY29tcGFueUlkIjoiMTIzNDUifSwiaXNzIjoiaHR0cHM6Ly9vYjE5LWF1dGgxLXVpLm8zYmFuay5jby51ayIsImF1ZCI6IjA0ZmJjMGQ5LTlmMDgtNGIyOC1iNjY2LWFkNmEwYmMzM2NjZSIsImlhdCI6MTYxMTIyMjgzNywiZXhwIjoxNjExMjI2NDM3LCJub25jZSI6IjEyNzBjYjJmZmM0ODQyYjc4OTUzYWZhMjIyOGUwYTg5IiwiYXV0aF90aW1lIjoxNjExMjIyODM3LCJhenAiOiIwNGZiYzBkOS05ZjA4LTRiMjgtYjY2Ni1hZDZhMGJjMzNjY2UiLCJyZWZyZXNoX3Rva2VuX2V4cGlyZXNfYXQiOjE2MTE2MTE2MzcsImNfaGFzaCI6Inc5NG9pTkg1RWlBdVNKdWJfUHAxSlEiLCJzX2hhc2giOiJhRmxHY3dJY1EtdTVHYnBmcXRCR293IiwiYWNyIjoidXJuOm9wZW5iYW5raW5nOnBzZDI6c2NhIn0.nfaJ-llxVVa4HS7oii2oGgAV6k3MPwtQLFaOAZ2RY8VcxoWBkXKnrPkwf2jRHvE4aJnnfD3BcDAfJNeDBFEt5YQcujl0NxQm3XpOVkhjUVvINjmi9zbDMz2WFDpz8hSZZxvzxQ29h5nFSFcvXxE-0d2i10nX87OVlophc5GabHt3mnP3UbFIy-k0i9a9JGodheF9Qu3J-q2bgNJpLww8jj-gNH1LekG3qu8fxaB1c5-MuERfSWvrgwrJKKUe_yIxXVpL4zMMXw3B6JGIeUgPHKtAZxiAA9YA6dTlA1yPQwOfh4B-qvAZDmuGBnoB3iUXKLIUqBUA8j3rzLkQj51ORg"
          },
          "authState": {
            "type": "string",
            "description": "__Mandatory__. The authorisation state",
            "example": "1270cb2ffc4842b78953afa2228e0a87"
          }
        },
        "description": "The request body containing the `ConsentAuthCodeRequest` json payload"
      },
      "ConsentDeleteResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "deleteStatus": {
            "$ref": "#/components/schemas/DeleteStatusEnum"
          },
          "institutionId": {
            "type": "string"
          },
          "institutionConsentId": {
            "type": "string"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "ApiResponseOfConsentDeleteResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "data": {
            "$ref": "#/components/schemas/ConsentDeleteResponse"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "Country": {
        "type": "object",
        "properties": {
          "displayName": {
            "type": "string"
          },
          "countryCode2": {
            "type": "string"
          }
        },
        "description": "An array of `Country` denoting which regions the `Institution` provides coverage for"
      },
      "CredentialsType": {
        "type": "string",
        "description": "The type of credentials required to register the `Institution`",
        "enum": [
          "OAUTH1",
          "OAUTH2",
          "OAUTH2_NOSECRET",
          "OAUTH2_SIGNATURE",
          "OPEN_BANKING_UK_MANUAL",
          "OPEN_BANKING_UK_AUTO",
          "OPEN_BANKING_IBM",
          "OPEN_BANKING_AUTO",
          "OPEN_BANKING_AUTO_EMAIL",
          "OPEN_BANKING_MANUAL",
          "OPEN_BANKING_WITH_TPP_ID_AND_SECRET",
          "API_KEY",
          "OPEN_BANKING_NO_KEY",
          "OPEN_BANKING_NO_TRANSPORT",
          "TOKEN_IO"
        ]
      },
      "CreditLine": {
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/CreditLineType"
          },
          "creditLineAmount": {
            "$ref": "#/components/schemas/Amount"
          }
        }
      },
      "CreditLineType": {
        "type": "string",
        "enum": [
          "AVAILABLE",
          "CREDIT",
          "EMERGENCY",
          "PRE_AGREED",
          "TEMPORARY",
          "OTHER",
          "UNKNOWN"
        ]
      },
      "CurrencyExchange": {
        "type": "object",
        "properties": {
          "sourceCurrency": {
            "type": "string"
          },
          "targetCurrency": {
            "type": "string"
          },
          "unitCurrency": {
            "type": "string"
          },
          "exchangeRate": {
            "type": "number"
          }
        }
      },
      "DeleteStatusEnum": {
        "type": "string",
        "enum": [
          "SUCCESS",
          "FAILED"
        ]
      },
      "DirectDebitResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "statusDetails": {
            "$ref": "#/components/schemas/PaymentStatusDetails"
          },
          "payeeDetails": {
            "$ref": "#/components/schemas/DirectDebitPayee"
          },
          "reference": {
            "type": "string"
          },
          "previousPaymentAmount": {
            "$ref": "#/components/schemas/Amount"
          },
          "previousPaymentDateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "DirectDebitPayee": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "__Mandatory__. The account holder name.",
            "example": "Tempus Risus Company"
          }
        }
      },
      "EnrichedTransaction": {
        "description": "Part of a financial profile for a User.",
        "properties": {
          "transactionId": {
            "type": "string",
            "description": "The id of the transaction",
            "example": "c51e3bee-36fb-4c0a-8441-d6ba2056fe87"
          },
          "transactionInformation": {
            "type": "string",
            "description": "Information for the transaction",
            "example": "Amazon Marketplace"
          },
          "amount": {
            "example": 21.99,
            "type": "number",
            "description": "The amount of the transaction"
          },
          "institution": {
            "type": "string",
            "description": "The id of the institution",
            "example": "starling"
          },
          "bookingDateTime": {
            "type": "string",
            "format": "date-time",
            "description": "The datetime of the transaction",
            "example": "2020-04-24T00:30:19.951Z"
          }
        }
      },
      "EnrichedWrapper": {
        "description": "A financial profile for a User.",
        "properties": {
          "incomeStreams": {
            "type": "array",
            "description": "A list of transaction streams",
            "items": {
              "$ref": "#/components/schemas/TransactionStream"
            }
          },
          "expenditureStreams": {
            "type": "array",
            "description": "A list of transaction streams",
            "items": {
              "$ref": "#/components/schemas/TransactionStream"
            }
          },
          "recentlyTerminatedIncomeStreams": {
            "type": "array",
            "description": "A list of terminated transaction income streams",
            "items": {
              "$ref": "#/components/schemas/TerminatedTransactionStream"
            }
          },
          "recentlyTerminatedExpenditureStreams": {
            "type": "array",
            "description": "A list of terminated transaction expenditure streams",
            "items": {
              "$ref": "#/components/schemas/TerminatedTransactionStream"
            }
          }
        },
        "type": "object"
      },
      "Enrichment": {
        "type": "object",
        "properties": {
          "categorisation": {
            "$ref": "#/components/schemas/Categorisation"
          },
          "transactionHash": {
            "$ref": "#/components/schemas/TransactionHash"
          },
          "cleansedDescription": {
            "type": "string"
          },
          "merchant": {
            "$ref": "#/components/schemas/EnrichmentMerchant"
          },
          "location": {
            "type": "string"
          },
          "paymentProcessor": {
            "type": "string"
          },
          "correctedDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "EnrichmentMerchant": {
        "type": "object",
        "properties": {
          "merchantName": {
            "type": "string"
          },
          "parentGroup": {
            "type": "string"
          }
        }
      },
      "EnvironmentType": {
        "type": "string",
        "description": "The environment type. <br><br>See [Institution Configuration](https://docs.yapily.com/guides/applications/institutions/#configuration) for more information",
        "enum": [
          "SANDBOX",
          "MOCK",
          "LIVE"
        ]
      },
      "ExchangeRateInformation": {
        "required": [
          "rateType",
          "unitCurrency"
        ],
        "type": "object",
        "properties": {
          "unitCurrency": {
            "type": "string",
            "description": "__Mandatory__. The currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is `GBP`."
          },
          "rate": {
            "type": "number",
            "description": "__Optional__. The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency."
          },
          "rateType": {
            "$ref": "#/components/schemas/RateTypeEnum"
          },
          "foreignExchangeContractReference": {
            "type": "string",
            "description": "__Optional__. The unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent."
          }
        },
        "description": "__Optional__. Used to provide details on the currency exchange rate and contract."
      },
      "ExchangeRateInformationResponse": {
        "required": [
          "rateType",
          "unitCurrency"
        ],
        "type": "object",
        "properties": {
          "unitCurrency": {
            "type": "string",
            "description": "__Mandatory__. The currency in which the rate of exchange is expressed in a currency exchange. In the example 1GBP = xxxCUR, the unit currency is `GBP`."
          },
          "rate": {
            "type": "number",
            "description": "__Optional__. The factor used for conversion of an amount from one currency to another. This reflects the price at which one currency was bought with another currency."
          },
          "rateType": {
            "$ref": "#/components/schemas/RateTypeEnum"
          },
          "foreignExchangeContractReference": {
            "type": "string",
            "description": "__Optional__. The unique and unambiguous reference to the foreign exchange contract agreed between the initiating party/creditor and the debtor agent."
          },
          "exchangeRateExpiryDate": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "FeatureDetails": {
        "type": "object",
        "properties": {
          "feature": {
            "$ref": "#/components/schemas/FeatureEnum"
          },
          "endpoint": {
            "type": "string"
          },
          "documentationUrl": {
            "type": "string"
          }
        }
      },
      "ApiListResponseOfDirectDebitResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseListMeta"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DirectDebitResponse"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/FilteredClientPayloadListDirectDebitResponse"
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "ApiListResponseOfFeatureDetails": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseListMeta"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureDetails"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/FilteredClientPayloadListFeatureDetails"
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "FeatureEnum": {
        "type": "string",
        "description": "Used to describe what functions are supported by the associated `Institution`.        <br><br>For more information on each feature, see the following links:        <ul>          <li>[Financial Data Features](https://docs.yapily.com/guides/financial-data/features/)</li>          <li>[Payments Features](https://docs.yapily.com/guides/payments/features/)</li>        </ul>",
        "enum": [
          "INITIATE_PRE_AUTHORISATION",
          "INITIATE_PRE_AUTHORISATION_ACCOUNTS",
          "INITIATE_PRE_AUTHORISATION_PAYMENTS",
          "INITIATE_ACCOUNT_REQUEST",
          "INITIATE_EMBEDDED_ACCOUNT_REQUEST",
          "ACCOUNT_REQUEST_DETAILS",
          "ACCOUNTS",
          "ACCOUNT",
          "ACCOUNT_TRANSACTIONS",
          "ACCOUNT_STATEMENTS",
          "ACCOUNT_STATEMENT",
          "ACCOUNT_STATEMENT_FILE",
          "ACCOUNT_SCHEDULED_PAYMENTS",
          "ACCOUNT_DIRECT_DEBITS",
          "ACCOUNT_PERIODIC_PAYMENTS",
          "ACCOUNT_TRANSACTIONS_WITH_MERCHANT",
          "IDENTITY",
          "ACCOUNTS_WITHOUT_BALANCE",
          "ACCOUNT_WITHOUT_BALANCE",
          "ACCOUNT_BALANCES",
          "INITIATE_SINGLE_PAYMENT_SORTCODE",
          "EXISTING_PAYMENT_INITIATION_DETAILS",
          "CREATE_SINGLE_PAYMENT_SORTCODE",
          "EXISTING_PAYMENTS_DETAILS",
          "INITIATE_DOMESTIC_SINGLE_PAYMENT",
          "INITIATE_EMBEDDED_DOMESTIC_SINGLE_PAYMENT",
          "CREATE_DOMESTIC_SINGLE_PAYMENT",
          "INITIATE_EMBEDDED_BULK_PAYMENT",
          "INITIATE_DOMESTIC_SINGLE_INSTANT_PAYMENT",
          "CREATE_DOMESTIC_SINGLE_INSTANT_PAYMENT",
          "INITIATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT",
          "CREATE_DOMESTIC_VARIABLE_RECURRING_PAYMENT",
          "INITIATE_DOMESTIC_SCHEDULED_PAYMENT",
          "CREATE_DOMESTIC_SCHEDULED_PAYMENT",
          "INITIATE_DOMESTIC_PERIODIC_PAYMENT",
          "CREATE_DOMESTIC_PERIODIC_PAYMENT",
          "PERIODIC_PAYMENT_FREQUENCY_EXTENDED",
          "INITIATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT",
          "CREATE_INTERNATIONAL_VARIABLE_RECURRING_PAYMENT",
          "INITIATE_INTERNATIONAL_SCHEDULED_PAYMENT",
          "CREATE_INTERNATIONAL_SCHEDULED_PAYMENT",
          "INITIATE_INTERNATIONAL_PERIODIC_PAYMENT",
          "CREATE_INTERNATIONAL_PERIODIC_PAYMENT",
          "INITIATE_INTERNATIONAL_SINGLE_PAYMENT",
          "CREATE_INTERNATIONAL_SINGLE_PAYMENT",
          "INITIATE_BULK_PAYMENT",
          "CREATE_BULK_PAYMENT",
          "TRANSFER",
          "OPEN_DATA_PERSONAL_CURRENT_ACCOUNTS",
          "OPEN_DATA_ATMS",
          "READ_DOMESTIC_SINGLE_REFUND",
          "READ_DOMESTIC_SCHEDULED_REFUND",
          "READ_DOMESTIC_PERIODIC_PAYMENT_REFUND",
          "READ_INTERNATIONAL_SINGLE_REFUND",
          "READ_INTERNATIONAL_SCHEDULED_REFUND",
          "ACCOUNT_BENEFICIARIES",
          "INITIATE_ONETIME_PRE_AUTHORISATION_PAYMENTS"
        ]
      },
      "FilterAndSort": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "before": {
            "type": "string",
            "format": "date-time"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "sort": {
            "$ref": "#/components/schemas/SortEnum"
          },
          "offset": {
            "type": "integer",
            "format": "int32"
          },
          "cursor": {
            "type": "string"
          }
        }
      },
      "FilteredClientPayloadListAccount": {
        "type": "object",
        "properties": {
          "apiCall": {
            "$ref": "#/components/schemas/ApiCall"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Account"
            }
          },
          "nextCursorHash": {
            "type": "string"
          },
          "nextLink": {
            "type": "string"
          },
          "pagingMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FilterAndSort"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "FilteredClientPayloadListAccountStatement": {
        "type": "object",
        "properties": {
          "apiCall": {
            "$ref": "#/components/schemas/ApiCall"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountStatement"
            }
          },
          "nextCursorHash": {
            "type": "string"
          },
          "nextLink": {
            "type": "string"
          },
          "pagingMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FilterAndSort"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "FilteredClientPayloadListCategory": {
        "type": "object",
        "properties": {
          "apiCall": {
            "$ref": "#/components/schemas/ApiCall"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Category"
            }
          },
          "nextCursorHash": {
            "type": "string"
          },
          "nextLink": {
            "type": "string"
          },
          "pagingMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FilterAndSort"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "FilteredClientPayloadListConsent": {
        "type": "object",
        "properties": {
          "apiCall": {
            "$ref": "#/components/schemas/ApiCall"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Consent"
            }
          },
          "nextCursorHash": {
            "type": "string"
          },
          "nextLink": {
            "type": "string"
          },
          "pagingMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FilterAndSort"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "FilteredClientPayloadListDirectDebitResponse": {
        "type": "object",
        "properties": {
          "apiCall": {
            "$ref": "#/components/schemas/ApiCall"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/DirectDebitResponse"
            }
          },
          "nextCursorHash": {
            "type": "string"
          },
          "nextLink": {
            "type": "string"
          },
          "pagingMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FilterAndSort"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "FilteredClientPayloadListFeatureDetails": {
        "type": "object",
        "properties": {
          "apiCall": {
            "$ref": "#/components/schemas/ApiCall"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureDetails"
            }
          },
          "nextCursorHash": {
            "type": "string"
          },
          "nextLink": {
            "type": "string"
          },
          "pagingMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FilterAndSort"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "FilteredClientPayloadListInstitution": {
        "type": "object",
        "properties": {
          "apiCall": {
            "$ref": "#/components/schemas/ApiCall"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Institution"
            }
          },
          "nextCursorHash": {
            "type": "string"
          },
          "nextLink": {
            "type": "string"
          },
          "pagingMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FilterAndSort"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "FilteredClientPayloadListPaymentResponse": {
        "type": "object",
        "properties": {
          "apiCall": {
            "$ref": "#/components/schemas/ApiCall"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentResponse"
            }
          },
          "nextCursorHash": {
            "type": "string"
          },
          "nextLink": {
            "type": "string"
          },
          "pagingMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FilterAndSort"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "FilteredClientPayloadListTransaction": {
        "type": "object",
        "properties": {
          "apiCall": {
            "$ref": "#/components/schemas/ApiCall"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "nextCursorHash": {
            "type": "string"
          },
          "nextLink": {
            "type": "string"
          },
          "pagingMap": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/FilterAndSort"
            }
          },
          "totalCount": {
            "type": "integer",
            "format": "int64"
          }
        }
      },
      "FinancialProfile": {
        "description": "A financial profile for a User.",
        "properties": {
          "status": {
            "example": "COMPLETED",
            "type": "string",
            "description": "The status, can be EMPTY, PARTIAL, PENDING, COMPLETED or ERROR."
          },
          "profileConsents": {
            "type": "array",
            "description": "A list of ProfileConsent used in the financial profile.",
            "items": {
              "$ref": "#/components/schemas/ProfileConsent"
            }
          },
          "enrichment": {
            "$ref": "#/components/schemas/EnrichedWrapper"
          }
        },
        "type": "object"
      },
      "FrequencyEnumExtended": {
        "type": "string",
        "description": "__Mandatory__. See [payment frequency](/guides/payments/payment-execution/periodic-payments/#payment-frequency) for more information",
        "enum": [
          "DAILY",
          "EVERY_WORKING_DAY",
          "CALENDAR_DAY",
          "WEEKLY",
          "EVERY_TWO_WEEKS",
          "MONTHLY",
          "EVERY_TWO_MONTHS",
          "QUARTERLY",
          "SEMIANNUAL",
          "ANNUAL"
        ]
      },
      "FrequencyRequest": {
        "required": [
          "type"
        ],
        "type": "object",
        "properties": {
          "type": {
            "$ref": "#/components/schemas/FrequencyEnumExtended"
          },
          "intervalWeek": {
            "type": "integer",
            "description": "__Conditional__. See [payment frequency](/guides/payments/payment-execution/periodic-payments/#payment-frequency) for more information",
            "format": "int32",
            "example": 1
          },
          "intervalMonth": {
            "type": "integer",
            "description": "__Conditional__. See [payment frequency](/guides/payments/payment-execution/periodic-payments/#payment-frequency) for more information",
            "format": "int32",
            "example": 1
          },
          "executionDay": {
            "type": "integer",
            "description": "__Conditional__. See [payment frequency](/guides/payments/payment-execution/periodic-payments/#payment-frequency) for more information",
            "format": "int32",
            "example": 1
          }
        },
        "description": "__Mandatory__. Defines the intervals at which payment should be made."
      },
      "FrequencyResponse": {
        "type": "object",
        "properties": {
          "frequencyType": {
            "$ref": "#/components/schemas/FrequencyEnumExtended"
          },
          "intervalWeek": {
            "type": "integer",
            "format": "int32"
          },
          "intervalMonth": {
            "type": "integer",
            "format": "int32"
          },
          "executionDay": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "Identity": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "firstName": {
            "type": "string"
          },
          "lastName": {
            "type": "string"
          },
          "fullName": {
            "type": "string"
          },
          "gender": {
            "type": "string"
          },
          "birthdate": {
            "type": "string"
          },
          "email": {
            "type": "string"
          },
          "phone": {
            "type": "string"
          },
          "addresses": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/IdentityAddress"
            }
          }
        }
      },
      "IdentityAddress": {
        "type": "object",
        "properties": {
          "addressLines": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "city": {
            "type": "string"
          },
          "postalCode": {
            "type": "string"
          },
          "country": {
            "type": "string"
          },
          "streetName": {
            "type": "string"
          },
          "buildingNumber": {
            "type": "string"
          },
          "type": {
            "$ref": "#/components/schemas/AddressTypeEnum"
          },
          "county": {
            "type": "string"
          }
        }
      },
      "ApiResponseOfIdentity": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "data": {
            "$ref": "#/components/schemas/Identity"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "Institution": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "The Yapily Id for the `Institution`"
          },
          "name": {
            "type": "string",
            "description": "The friendly name of the `Institution`"
          },
          "fullName": {
            "type": "string",
            "description": "The full name of the `Institution`"
          },
          "countries": {
            "uniqueItems": true,
            "type": "array",
            "description": "An array of `Country` denoting which regions the `Institution` provides coverage for",
            "items": {
              "$ref": "#/components/schemas/Country"
            }
          },
          "environmentType": {
            "$ref": "#/components/schemas/EnvironmentType"
          },
          "credentialsType": {
            "$ref": "#/components/schemas/CredentialsType"
          },
          "media": {
            "uniqueItems": true,
            "type": "array",
            "description": "Contains links to the logo and the icons for the `Institution`",
            "items": {
              "$ref": "#/components/schemas/Media"
            }
          },
          "features": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureEnum"
            }
          },
          "monitoring": {
            "type": "object",
            "additionalProperties": {
              "$ref": "#/components/schemas/MonitoringFeatureStatus"
            }
          }
        }
      },
      "ApiListResponseOfInstitution": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseListMeta"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Institution"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/FilteredClientPayloadListInstitution"
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "InstitutionConsent": {
        "type": "object",
        "properties": {
          "institutionId": {
            "type": "string"
          }
        }
      },
      "InstitutionError": {
        "type": "object",
        "properties": {
          "errorMessage": {
            "type": "string"
          },
          "httpStatusCode": {
            "type": "integer",
            "format": "int32"
          }
        }
      },
      "InternationalPaymentRequest": {
        "required": [
          "currencyOfTransfer"
        ],
        "type": "object",
        "properties": {
          "currencyOfTransfer": {
            "type": "string",
            "description": "__Mandatory__. The 3-letter currency code for the currency of the payment to be transferred which can differ from the currency of the payer's account."
          },
          "exchangeRateInformation": {
            "$ref": "#/components/schemas/ExchangeRateInformation"
          },
          "purpose": {
            "type": "string",
            "description": "__Optional__. Used to indicate the external purpose as a [ISO20022 purpose code](https://www.rba.hr/documents/20182/183267/External+purpose+codes+list/8a28f888-1f83-5e29-d6ed-fce05f428689?version=1.1) value."
          },
          "priority": {
            "$ref": "#/components/schemas/PriorityCodeEnum"
          },
          "chargeBearer": {
            "$ref": "#/components/schemas/ChargeBearerType"
          }
        },
        "description": "__Conditional__. Used to specify properties to define an international payment. <br><br>Must be specified when the payment `type` is one of the following:<ul>     <li><code>INTERNATIONAL_SINGLE_PAYMENT</code></li>     <li><code>INTERNATIONAL_SCHEDULED_PAYMENT</code></li>     <li><code>INTERNATIONAL_PERIODIC_PAYMENT</code></li></ul>"
      },
      "IsoBankTransactionCode": {
        "type": "object",
        "properties": {
          "domainCode": {
            "$ref": "#/components/schemas/IsoCodeDetails"
          },
          "familyCode": {
            "$ref": "#/components/schemas/IsoCodeDetails"
          },
          "subFamilyCode": {
            "$ref": "#/components/schemas/IsoCodeDetails"
          }
        }
      },
      "IsoCodeDetails": {
        "type": "object",
        "properties": {
          "code": {
            "default": "UNKNOWN",
            "type": "string"
          },
          "name": {
            "default": "UNKNOWN",
            "type": "string"
          }
        }
      },
      "Media": {
        "type": "object",
        "properties": {
          "source": {
            "type": "string"
          },
          "type": {
            "type": "string"
          }
        },
        "description": "Contains links to the logo and the icons for the `Institution`"
      },
      "Merchant": {
        "type": "object",
        "properties": {
          "merchantName": {
            "type": "string"
          },
          "merchantCategoryCode": {
            "type": "string"
          }
        }
      },
      "MonitoringEndpointStatus": {
        "type": "object",
        "properties": {
          "lastTested": {
            "type": "string",
            "format": "date-time"
          },
          "resourceEndpoint": {
            "type": "string"
          },
          "span": {
            "type": "string",
            "format": "iso8601"
          },
          "status": {
            "$ref": "#/components/schemas/MonitoringStatusEnum"
          }
        }
      },
      "MonitoringFeatureStatus": {
        "type": "object",
        "properties": {
          "lastTested": {
            "type": "string",
            "format": "date-time"
          },
          "span": {
            "type": "string",
            "format": "iso8601"
          },
          "status": {
            "$ref": "#/components/schemas/MonitoringStatusEnum"
          }
        }
      },
      "MultiAuthorisation": {
        "type": "object",
        "properties": {
          "status": {
            "type": "string"
          },
          "numberOfAuthorisationRequired": {
            "type": "integer",
            "format": "int32"
          },
          "numberOfAuthorisationReceived": {
            "type": "integer",
            "format": "int32"
          },
          "lastUpdatedDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "expirationDateTime": {
            "type": "string",
            "format": "date-time"
          }
        }
      },
      "NewApplicationUser": {
        "type": "object",
        "properties": {
          "applicationUserId": {
            "type": "string",
            "description": "__Optional__. An additional unique identifier that you can specify when creating a new `User` to more easily reference it",
            "example": "user-234562290"
          },
          "referenceId": {
            "type": "string",
            "description": "__Deprecated__. A non-unique reference Id for the `User`"
          }
        }
      },
      "Next": {
        "type": "object",
        "properties": {
          "from": {
            "type": "string",
            "format": "date-time"
          },
          "before": {
            "type": "string",
            "format": "date-time"
          },
          "limit": {
            "type": "integer",
            "format": "int32"
          },
          "cursor": {
            "type": "string"
          }
        }
      },
      "OneTimeTokenRequest": {
        "required": [
          "oneTimeToken"
        ],
        "type": "object",
        "properties": {
          "oneTimeToken": {
            "type": "string",
            "description": "__Mandatory__. The one time token to exchange for a consent token.",
            "example": "eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzUxMiJ9.eyJJTlNUSVRVVElPTiI6ImJidmEtc2FuZGJveCIsIlVVSUQiOiJmMzNmNGU4ZC1jMDQ0LTQ2YTktOTlkMC0wYmRlMzIyYTJjOTIifQ.4Qv3NJI6av2nKi1U3aNmm71cIwJ3TvRsIlYDafQUVv_Khy_e-8oEpV_BoP4V1CII12oT-Yq4cPveHILz8BOwjg"
          }
        },
        "description": "The request body containing the `OneTimeTokenRequest` json payload"
      },
      "Pagination": {
        "type": "object",
        "properties": {
          "totalCount": {
            "type": "integer",
            "format": "int64"
          },
          "self": {
            "$ref": "#/components/schemas/FilterAndSort"
          },
          "next": {
            "$ref": "#/components/schemas/Next"
          }
        }
      },
      "Payee": {
        "type": "object",
        "required": [
          "accountIdentifications",
          "name"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "__Mandatory__. The account holder name of the beneficiary.",
            "example": "Jane Doe"
          },
          "accountIdentifications": {
            "uniqueItems": true,
            "type": "array",
            "description": "__Mandatory__. The account identifications that identify the `Payee` bank account.",
            "example": [
              {
                "identification": "401016",
                "type": "SORT_CODE"
              },
              {
                "identification": "71518920",
                "type": "ACCOUNT_NUMBER"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/AccountIdentification"
            }
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          },
          "merchantId": {
            "type": "string",
            "description": "__Optional__. The merchant ID is a unique code provided by the payment processor to the merchant.",
            "example": "24589303"
          },
          "merchantCategoryCode": {
            "type": "string",
            "description": "__Optional__. The category code of the merchant in case the `Payee` is a business.",
            "example": "5551"
          }
        },
        "description": "__Mandatory__. The `Payee` object contains details of the beneficiary [person or business]. You must define this in your payment request alongwith all of the nested mandatory properties."
      },
      "PayeeDetails": {
        "type": "object",
        "required": [
          "accountIdentifications",
          "name",
          "country"
        ],
        "properties": {
          "name": {
            "type": "string",
            "description": "__Mandatory__. The account holder name of the beneficiary.",
            "example": "Jane Doe"
          },
          "accountIdentifications": {
            "uniqueItems": true,
            "type": "array",
            "description": "__Mandatory__. The account identifications that identify the `Payee` bank account.",
            "example": [
              {
                "identification": "IBUK123456789",
                "type": "IBAN"
              }
            ],
            "items": {
              "$ref": "#/components/schemas/AccountIdentification"
            }
          },
          "country": {
            "type": "string",
            "description": "__Conditional__. The 2-letter country code for the address. <br><br>An `Institution` may require you to specify the `country` when used in the context of the `Payee` to be able to make a payment",
            "example": "GB"
          }
        },
        "description": "__Mandatory__. The `PayeeDetails` object contains details of the beneficiary [person or business]. You must define this in your payment request alongwith all of the nested mandatory properties."
      },
      "Payer": {
        "required": [
          "accountIdentifications"
        ],
        "type": "object",
        "properties": {
          "name": {
            "type": "string",
            "description": "__Mandatory__. The account holder name of the Payer.",
            "example": "John Doe"
          },
          "accountIdentifications": {
            "uniqueItems": true,
            "type": "array",
            "description": "__Mandatory__. The account identifications that identify the `Payer` bank account.",
            "items": {
              "$ref": "#/components/schemas/AccountIdentification"
            }
          },
          "address": {
            "$ref": "#/components/schemas/Address"
          }
        },
        "description": "__Conditional__. The `Payer` object contains details of the benefactor [person or business]. If you define this in your payment request, you mustdefine this along with all of the nested mandatory properties.<ol>     <li>The `Payer` object is mandatory along with its mandatory properties when the account of the benefactor is from an `Institution` in Europe.          See [Berlin Group](https://docs.yapily.com/knowledge/berlin_group/) for more information.</li>     <li>The `Payer` should be specified if the `Payer` account is intended to be locked.</li></ol>"
      },
      "PayerDetails": {
        "required": [
          "accountIdentifications"
        ],
        "type": "object",
        "properties": {
          "accountIdentifications": {
            "uniqueItems": true,
            "type": "array",
            "description": "__Mandatory__. The account identifications that identify the `Payer` bank account.",
            "items": {
              "$ref": "#/components/schemas/AccountIdentification"
            }
          }
        },
        "description": "__Conditional__. The `Payer` object contains details of the benefactor [person or business]. If you define this in your payment request, you mustdefine this along with all of the nested mandatory properties.<ol>     <li>The `Payer` object is mandatory along with its mandatory properties when the account of the benefactor is from an `Institution` in Europe.          See [Berlin Group](https://docs.yapily.com/knowledge/berlin_group/) for more information.</li>     <li>The `Payer` should be specified if the `Payer` account is intended to be locked.</li></ol>"
      },
      "PaymentAuthorisationRequest": {
        "required": [
          "institutionId",
          "paymentRequest"
        ],
        "type": "object",
        "properties": {
          "userUuid": {
            "type": "string",
            "format": "uuid"
          },
          "applicationUserId": {
            "type": "string",
            "description": "__Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.",
            "example": "user-234562290"
          },
          "forwardParameters": {
            "type": "array",
            "description": "Extra parameters the TPP may want to get forwarded in the callback request after the PSU redirect.",
            "items": {
              "type": "string"
            }
          },
          "institutionId": {
            "type": "string",
            "description": "__Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.",
            "example": "yapily-mock"
          },
          "callback": {
            "type": "string",
            "description": "__Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-optional) for more information.",
            "example": "https://display-parameters.com"
          },
          "redirect": {
            "$ref": "#/components/schemas/RedirectRequest"
          },
          "oneTimeToken": {
            "type": "boolean",
            "description": "__Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-with-an-ott-optional) for more information.",
            "example": false
          },
          "paymentRequest": {
            "$ref": "#/components/schemas/PaymentRequest"
          }
        },
        "description": "The request body containing an `PaymentAuthorisationRequest` json payload"
      },
      "PaymentAuthorisationRequestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userUuid": {
            "type": "string",
            "format": "uuid"
          },
          "applicationUserId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "institutionId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "$ref": "#/components/schemas/AuthorisationStatus"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "transactionFrom": {
            "type": "string",
            "format": "date-time"
          },
          "transactionTo": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "timeToExpireInMillis": {
            "type": "integer",
            "format": "int64",
            "deprecated": true
          },
          "timeToExpire": {
            "type": "string",
            "format": "iso8601"
          },
          "featureScope": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureEnum"
            }
          },
          "consentToken": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "authorizedAt": {
            "type": "string",
            "format": "date-time"
          },
          "institutionConsentId": {
            "type": "string"
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentChargeDetails"
            }
          },
          "exchangeRateInformation": {
            "$ref": "#/components/schemas/ExchangeRateInformationResponse"
          },
          "authorisationUrl": {
            "type": "string"
          },
          "qrCodeUrl": {
            "type": "string"
          },
          "explanation": {
            "type": "string"
          }
        }
      },
      "ApiResponseOfPaymentAuthorisationRequestResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "data": {
            "$ref": "#/components/schemas/PaymentAuthorisationRequestResponse"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "PaymentContextType": {
        "type": "string",
        "default": "OTHER",
        "description": "__Optional__. The payment context code. This defaults to `OTHER` if not specified.",
        "enum": [
          "BILL",
          "GOODS",
          "SERVICES",
          "OTHER",
          "PERSON_TO_PERSON"
        ]
      },
      "PaymentEmbeddedAuthorisationRequest": {
        "required": [
          "institutionId",
          "paymentRequest"
        ],
        "type": "object",
        "properties": {
          "userUuid": {
            "type": "string",
            "format": "uuid"
          },
          "applicationUserId": {
            "type": "string",
            "description": "__Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.",
            "example": "user-234562290"
          },
          "institutionId": {
            "type": "string",
            "description": "__Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.",
            "example": "yapily-mock"
          },
          "callback": {
            "type": "string",
            "description": "__Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-optional) for more information.",
            "example": "https://display-parameters.com"
          },
          "redirect": {
            "$ref": "#/components/schemas/RedirectRequest"
          },
          "oneTimeToken": {
            "type": "boolean",
            "description": "__Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-with-an-ott-optional) for more information.",
            "example": false
          },
          "paymentRequest": {
            "$ref": "#/components/schemas/PaymentRequest"
          },
          "userCredentials": {
            "$ref": "#/components/schemas/UserCredentials"
          },
          "selectedScaMethod": {
            "$ref": "#/components/schemas/ScaMethod"
          },
          "scaCode": {
            "type": "string",
            "description": "__Conditional__. Used to update the authorisation with the sca code received by the user from the `Institution` using the embedded payment authorisation flow.<br><br>This is the penultimate step required in the embedded payment authorisation flow to authorise the `Consent`. After sending the sca code, to obtain an authorised consent, the last step is to poll [Get Consent](https://docs.yapily.com/api/#get-consent) until the `Institution` authorises the request and the `Consent` `status` transitions to `AUTHORIZED`.",
            "example": "325614"
          }
        },
        "description": "The request body containing an `PaymentEmbeddedAuthorisationRequest` json payload"
      },
      "PaymentEmbeddedAuthorisationRequestResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "userUuid": {
            "type": "string",
            "format": "uuid"
          },
          "applicationUserId": {
            "type": "string"
          },
          "referenceId": {
            "type": "string"
          },
          "institutionId": {
            "type": "string"
          },
          "status": {
            "type": "string",
            "$ref": "#/components/schemas/AuthorisationStatus"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "transactionFrom": {
            "type": "string",
            "format": "date-time"
          },
          "transactionTo": {
            "type": "string",
            "format": "date-time"
          },
          "expiresAt": {
            "type": "string",
            "format": "date-time"
          },
          "timeToExpireInMillis": {
            "type": "integer",
            "format": "int64",
            "deprecated": true
          },
          "timeToExpire": {
            "type": "string",
            "format": "iso8601"
          },
          "featureScope": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/FeatureEnum"
            }
          },
          "consentToken": {
            "type": "string"
          },
          "state": {
            "type": "string"
          },
          "authorizedAt": {
            "type": "string",
            "format": "date-time"
          },
          "institutionConsentId": {
            "type": "string"
          },
          "charges": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentChargeDetails"
            }
          },
          "exchangeRateInformation": {
            "$ref": "#/components/schemas/ExchangeRateInformationResponse"
          },
          "authorisationUrl": {
            "type": "string"
          },
          "qrCodeUrl": {
            "type": "string"
          },
          "explanation": {
            "type": "string"
          },
          "scaMethods": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ScaMethod"
            }
          },
          "selectedScaMethod": {
            "$ref": "#/components/schemas/ScaMethod"
          }
        }
      },
      "ApiResponseOfPaymentEmbeddedAuthorisationRequestResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "data": {
            "$ref": "#/components/schemas/PaymentEmbeddedAuthorisationRequestResponse"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "PaymentIsoStatus": {
        "type": "object",
        "properties": {
          "code": {
            "$ref": "#/components/schemas/PaymentIsoStatusCodeEnum"
          },
          "name": {
            "type": "string",
            "description": "The full name of the ISO 20022 `PaymentStatusCode`.",
            "example": "AcceptedCreditSettlementCompleted"
          }
        }
      },
      "PaymentIsoStatusCodeEnum": {
        "type": "string",
        "description": "The ISO 20022 `PaymentStatusCode`.",
        "example": "ACCC",
        "enum": [
          "ACCC",
          "ACCP",
          "ACSC",
          "ACSP",
          "ACTC",
          "ACWC",
          "ACWP",
          "RCVD",
          "PDNG",
          "RJCT",
          "CANC",
          "ACFC",
          "PATC",
          "PART"
        ]
      },
      "PaymentPreAuthorisationRequest": {
        "required": [
          "institutionId",
          "scope",
          "payee",
          "payer",
          "amount",
          "reference"
        ],
        "type": "object",
        "properties": {
          "userUuid": {
            "type": "string",
            "format": "uuid"
          },
          "applicationUserId": {
            "type": "string",
            "description": "__Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.",
            "example": "user-234562290"
          },
          "forwardParameters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "institutionId": {
            "type": "string",
            "description": "__Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.",
            "example": "yapily-mock"
          },
          "callback": {
            "type": "string",
            "description": "__Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-optional) for more information.",
            "example": "https://display-parameters.com"
          },
          "redirect": {
            "$ref": "#/components/schemas/RedirectRequest"
          },
          "oneTimeToken": {
            "type": "boolean",
            "description": "__Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-with-an-ott-optional) for more information.",
            "example": false
          },
          "scope": {
            "type": "string",
            "description": "__Mandatory__. Defines the scope of the pre-authorisation request.",
            "example": "AIS"
          },
          "payee": {
            "$ref": "#/components/schemas/PayeeDetails"
          },
          "payer": {
            "$ref": "#/components/schemas/PayerDetails"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "reference": {
            "type": "string",
            "description": "__Mandatory__. The payment reference or description. Limited to a maximum of 18 characters long.",
            "example": "Bill payment"
          }
        },
        "description": "__Mandatory__. The payment pre authorisation request object defining the details of the payment and pre auth."
      },
      "PaymentRequest": {
        "required": [
          "amount",
          "payee",
          "paymentIdempotencyId",
          "type"
        ],
        "type": "object",
        "properties": {
          "paymentIdempotencyId": {
            "type": "string",
            "description": "__Mandatory__. A unique identifier that you must provide to identify the payment. This can be any alpha-numeric string but is limited to a maximum of 35 characters.",
            "example": "04ab4536gaerfc0e1f93c4f4"
          },
          "payer": {
            "$ref": "#/components/schemas/Payer"
          },
          "reference": {
            "type": "string",
            "description": "__Optional__. The payment reference or description. Limited to a maximum of 18 characters long.",
            "example": "Bill payment"
          },
          "contextType": {
            "$ref": "#/components/schemas/PaymentContextType"
          },
          "type": {
            "$ref": "#/components/schemas/PaymentType"
          },
          "payee": {
            "$ref": "#/components/schemas/Payee"
          },
          "periodicPayment": {
            "$ref": "#/components/schemas/PeriodicPaymentRequest"
          },
          "internationalPayment": {
            "$ref": "#/components/schemas/InternationalPaymentRequest"
          },
          "amount": {
            "$ref": "#/components/schemas/Amount"
          },
          "paymentDateTime": {
            "type": "string",
            "description": "__Conditional__. Used to specify the date of the payment when the payment type is one of the following:<ul>    <li><code>DOMESTIC_SCHEDULED_PAYMENT</code></li>    <li><code>DOMESTIC_PERIODIC_PAYMENT</code></li>    <li><code>INTERNATIONAL_SCHEDULED_PAYMENT</code></li>    <li><code>INTERNATIONAL_PERIODIC_PAYMENT</code></li></ul>",
            "format": "date-time",
            "example": "2021-07-21T17:32:28Z"
          },
          "readRefundAccount": {
            "type": "boolean",
            "description": "__Optional__. Used to request the payer details in the payment response when the `Institution` provides the feature `READ_DOMESTIC_SINGLE_REFUND`.<br><br>See [Reverse Payments](https://docs.yapily.com/knowledge/reverse_payments/) for more information.",
            "example": false
          }
        },
        "description": "__Mandatory__. The payment request object defining the details of the payment."
      },
      "PaymentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "institutionConsentId": {
            "type": "string"
          },
          "paymentIdempotencyId": {
            "type": "string"
          },
          "paymentLifecycleId": {
            "type": "string"
          },
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "statusDetails": {
            "$ref": "#/components/schemas/PaymentStatusDetails"
          },
          "payer": {
            "$ref": "#/components/schemas/Payer"
          },
          "payeeDetails": {
            "$ref": "#/components/schemas/Payee"
          },
          "reference": {
            "type": "string"
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "amountDetails": {
            "$ref": "#/components/schemas/Amount"
          },
          "createdAt": {
            "type": "string",
            "format": "date-time"
          },
          "firstPaymentAmount": {
            "$ref": "#/components/schemas/Amount"
          },
          "firstPaymentDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "nextPaymentAmount": {
            "$ref": "#/components/schemas/Amount"
          },
          "nextPaymentDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "finalPaymentAmount": {
            "$ref": "#/components/schemas/Amount"
          },
          "finalPaymentDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "numberOfPayments": {
            "type": "integer",
            "format": "int32"
          },
          "previousPaymentAmount": {
            "$ref": "#/components/schemas/Amount"
          },
          "previousPaymentDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "chargeDetails": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentChargeDetails"
            }
          },
          "scheduledPaymentType": {
            "type": "string"
          },
          "scheduledPaymentDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "frequency": {
            "$ref": "#/components/schemas/FrequencyResponse"
          },
          "currencyOfTransfer": {
            "type": "string"
          },
          "purpose": {
            "type": "string"
          },
          "priority": {
            "$ref": "#/components/schemas/PriorityCodeEnum"
          },
          "exchangeRate": {
            "$ref": "#/components/schemas/ExchangeRateInformationResponse"
          },
          "refundAccount": {
            "$ref": "#/components/schemas/RefundAccount"
          },
          "bulkAmountSum": {
            "type": "number"
          }
        }
      },
      "ApiListResponseOfPaymentResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseListMeta"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentResponse"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/FilteredClientPayloadListPaymentResponse"
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "ApiResponseOfPaymentResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "data": {
            "$ref": "#/components/schemas/PaymentResponse"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "PaymentResponses": {
        "type": "object",
        "properties": {
          "payments": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PaymentResponse"
            }
          }
        }
      },
      "ApiResponseOfPaymentResponses": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "data": {
            "$ref": "#/components/schemas/PaymentResponses"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "PaymentStatus": {
        "type": "string",
        "description": "The status of the Payment. <br><br>For more information, see [Payment Status](/guides/payments/payment-status/)",
        "enum": [
          "PENDING",
          "FAILED",
          "DECLINED",
          "COMPLETED",
          "COMPLETED_SETTLEMENT_IN_PROCESS",
          "EXPIRED",
          "UNKNOWN",
          "ACTIVE",
          "INACTIVE"
        ]
      },
      "PaymentStatusDetails": {
        "type": "object",
        "properties": {
          "status": {
            "$ref": "#/components/schemas/PaymentStatus"
          },
          "statusReason": {
            "type": "string"
          },
          "statusReasonDescription": {
            "type": "string"
          },
          "statusUpdateDate": {
            "type": "string",
            "format": "date-time"
          },
          "multiAuthorisationStatus": {
            "$ref": "#/components/schemas/MultiAuthorisation"
          },
          "isoStatus": {
            "$ref": "#/components/schemas/PaymentIsoStatus"
          }
        }
      },
      "PaymentType": {
        "type": "string",
        "description": "__Mandatory__. Used to specify which of the [payment types](https://docs.yapily.com/guides/payments/payment-execution/#payment-types) to execute.<br><br>See [European Payments](https://docs.yapily.com/knowledge/european_payments/) to verify whether the `type` should be `DOMESTIC` or `INTERNATIONAL`.",
        "enum": [
          "DOMESTIC_PAYMENT",
          "DOMESTIC_INSTANT_PAYMENT",
          "DOMESTIC_VARIABLE_RECURRING_PAYMENT",
          "DOMESTIC_SCHEDULED_PAYMENT",
          "DOMESTIC_PERIODIC_PAYMENT",
          "INTERNATIONAL_PAYMENT",
          "INTERNATIONAL_SCHEDULED_PAYMENT",
          "INTERNATIONAL_PERIODIC_PAYMENT",
          "BULK_PAYMENT"
        ]
      },
      "PeriodicPaymentRequest": {
        "required": [
          "frequency"
        ],
        "type": "object",
        "properties": {
          "frequency": {
            "$ref": "#/components/schemas/FrequencyRequest"
          },
          "numberOfPayments": {
            "type": "integer",
            "description": "__Conditional__. Defines the total number of payments to be made.<br><br>This is required if `finalPaymentDateTime` is not specified and it is intended for the periodic payment have a fixed amount of payments.",
            "format": "int32",
            "example": 5
          },
          "nextPaymentDateTime": {
            "type": "string",
            "description": "__Conditional__. Defines when to start the recurring payment date and time. Specify this if you want the first payment to start on a different day than what the frequency object defines.",
            "format": "date-time",
            "example": "2018-01-10T00:00:00Z"
          },
          "nextPaymentAmount": {
            "description": "__Conditional__. Defines the recurring payment amount. Specify this if you want the recurring payments to have a different amount from the first payment (specified by `PaymentRequest.amount`).",
            "$ref": "#/components/schemas/Amount"
          },
          "finalPaymentDateTime": {
            "type": "string",
            "description": "__Conditional__. Defines the final payment date and time. To create an open-ended periodic payment, do not specify this property.",
            "format": "date-time",
            "example": "2030-01-10T00:00:00Z"
          },
          "finalPaymentAmount": {
            "description": "__Conditional__. Defines the final payment amount if different from the recurring payment amount. To create an open-ended periodic payment, do not specify this property.",
            "$ref": "#/components/schemas/Amount"
          }
        },
        "description": "__Conditional__. Used to specify properties to define a periodic payment. <br><br>Must be specified when the payment `type` is one of the following:<ul>     <li><code>DOMESTIC_PERIODIC_PAYMENT</code></li>     <li><code>INTERNATIONAL_PERIODIC_PAYMENT</code></li></ul>"
      },
      "PreAuthorisationRequest": {
        "required": [
          "institutionId",
          "scope"
        ],
        "type": "object",
        "properties": {
          "userUuid": {
            "type": "string",
            "format": "uuid"
          },
          "applicationUserId": {
            "type": "string",
            "description": "__Conditional__. The user-friendly reference to the `User` that will authorise the authorisation request. If a `User` with the specified `applicationUserId` exists, it will be used otherwise, a new `User` with the specified `applicationUserId` will be created and used. Either the `userUuid` or `applicationUserId` must be provided.",
            "example": "user-234562290"
          },
          "forwardParameters": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "institutionId": {
            "type": "string",
            "description": "__Mandatory__. The reference to the `Institution` which identifies which institution the authorisation request is sent to.",
            "example": "yapily-mock"
          },
          "callback": {
            "type": "string",
            "description": "__Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`. <br><br>See [Using a callback (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-optional) for more information.",
            "example": "https://display-parameters.com"
          },
          "redirect": {
            "$ref": "#/components/schemas/RedirectRequest"
          },
          "oneTimeToken": {
            "type": "boolean",
            "description": "__Conditional__. Used to receive a `oneTimeToken` rather than a `consentToken` at the `callback` for additional security. This can only be used when the `callback` is set. <br><br>See [Using a callback with an OTT (Optional)](https://docs.yapily.com/knowledge/callback_url/#using-a-callback-with-an-ott-optional) for more information.",
            "example": false
          },
          "scope": {
            "type": "string",
            "description": "__Mandatory__. Defines the scope of the pre-authorisation request.",
            "example": "AIS"
          }
        }
      },
      "PriorityCodeEnum": {
        "type": "string",
        "enum": [
          "NORMAL",
          "URGENT"
        ]
      },
      "ProfileConsent": {
        "description": "Object returned when creating a User Profile.",
        "properties": {
          "id": {
            "example": "eb2ad083-a111-4143-8756-a3a3cef4031c",
            "type": "string",
            "format": "uuid",
            "description": "The id of the ProfileConsent"
          },
          "status": {
            "example": "PENDING",
            "type": "string",
            "description": "The status, can be PENDING, COMPLETED or ERROR."
          },
          "userId": {
            "example": "3ddf5dd0-aa48-4d0f-baa7-fa057e9e911d",
            "type": "string",
            "format": "uuid",
            "description": "The userUuid."
          },
          "referenceConsentId": {
            "example": "1e2e5167-8519-4c19-b016-8f2f0c6e38b6",
            "type": "string",
            "format": "uuid",
            "description": "The referenceConsentId."
          },
          "institutionId": {
            "example": "mock-sandbox",
            "type": "string",
            "description": "The id of the Institution."
          }
        },
        "type": "object"
      },
      "ProprietaryBankTransactionCode": {
        "type": "object",
        "properties": {
          "code": {
            "type": "string"
          },
          "issuer": {
            "type": "string"
          }
        }
      },
      "RateTypeEnum": {
        "type": "string",
        "description": "__Mandatory__. The type used to complete the currency exchange.",
        "enum": [
          "ACTUAL",
          "AGREED",
          "INDICATIVE"
        ]
      },
      "RawRequest": {
        "type": "object",
        "properties": {
          "method": {
            "type": "string"
          },
          "url": {
            "type": "string"
          },
          "requestInstant": {
            "type": "string",
            "format": "date-time"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "body": {
            "type": "object"
          },
          "bodyParameters": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "startTime": {
            "type": "string",
            "format": "date-time"
          },
          "startedAt": {
            "type": "string",
            "format": "date-time",
            "deprecated": true
          }
        }
      },
      "RawResponse": {
        "type": "object",
        "properties": {
          "request": {
            "$ref": "#/components/schemas/RawRequest"
          },
          "duration": {
            "type": "string",
            "format": "iso8601"
          },
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "resultCode": {
            "type": "integer",
            "format": "int32"
          },
          "result": {
            "type": "object"
          }
        }
      },
      "RedirectRequest": {
        "required": [
          "url"
        ],
        "type": "object",
        "properties": {
          "url": {
            "type": "string",
            "description": "__Mandatory__.Successful redirect after the user complete the authorisation at the `Institution`."
          }
        },
        "description": "__Optional__. The server to redirect the user to after the user complete the authorisation at the `Institution`."
      },
      "RefundAccount": {
        "type": "object",
        "properties": {
          "name": {
            "type": "string"
          },
          "accountIdentifications": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccountIdentification"
            }
          }
        }
      },
      "ResponseForwardedData": {
        "type": "object",
        "properties": {
          "headers": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "url": {
            "type": "string"
          }
        }
      },
      "ResponseListMeta": {
        "type": "object",
        "properties": {
          "tracingId": {
            "type": "string"
          },
          "count": {
            "type": "integer",
            "format": "int32"
          },
          "pagination": {
            "$ref": "#/components/schemas/Pagination"
          }
        }
      },
      "ResponseMeta": {
        "type": "object",
        "properties": {
          "tracingId": {
            "type": "string"
          }
        }
      },
      "ScaMethod": {
        "required": [
          "id"
        ],
        "type": "object",
        "description": "__Conditional__. Used to update the authorisation with the sca method of the user's choice for the `Institution` that uses the embedded authorisation flow. If the user has multiple sca methods configured, the `Institution` will allow the user to select from each of these options. <br><br>When the user has multiple sca methods for the `Institution`, this is the second step required in the embedded authorisation flow to authorise the `Consent`.",
        "example": {
          "id": "944",
          "type": "PUSH_OTP",
          "description": "SecureSIGN"
        },
        "properties": {
          "id": {
            "type": "string",
            "description": "__Mandatory__. The id of the sca method provided by the `Institution`",
            "example": "258211#OPTICAL"
          },
          "type": {
            "$ref": "#/components/schemas/Type"
          },
          "description": {
            "type": "string",
            "description": "__Optional__. A description of the sca method if provided by the `Institution`",
            "example": "Testkarte Hr. Haubach_1, optisch"
          }
        }
      },
      "SortEnum": {
        "type": "string",
        "description": "Valid options for the sort parameter",
        "enum": [
          "date",
          "-date"
        ]
      },
      "MonitoringStatusEnum": {
        "type": "string",
        "enum": [
          "Up",
          "Down",
          "Warning",
          "Unknown",
          "Expired"
        ]
      },
      "StatementReference": {
        "type": "object",
        "properties": {
          "value": {
            "type": "string"
          }
        }
      },
      "Subcategory": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "format": "uuid"
          },
          "label": {
            "type": "string"
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "date": {
            "type": "string",
            "format": "date-time"
          },
          "bookingDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "valueDateTime": {
            "type": "string",
            "format": "date-time"
          },
          "status": {
            "$ref": "#/components/schemas/TransactionStatusEnum"
          },
          "amount": {
            "type": "number"
          },
          "currency": {
            "type": "string"
          },
          "transactionAmount": {
            "$ref": "#/components/schemas/Amount"
          },
          "grossAmount": {
            "$ref": "#/components/schemas/Amount"
          },
          "currencyExchange": {
            "$ref": "#/components/schemas/CurrencyExchange"
          },
          "chargeDetails": {
            "$ref": "#/components/schemas/TransactionChargeDetails"
          },
          "reference": {
            "type": "string"
          },
          "statementReferences": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/StatementReference"
            }
          },
          "description": {
            "type": "string"
          },
          "transactionInformation": {
            "type": "array",
            "items": {
              "type": "string"
            }
          },
          "addressDetails": {
            "$ref": "#/components/schemas/AddressDetails"
          },
          "isoBankTransactionCode": {
            "$ref": "#/components/schemas/IsoBankTransactionCode"
          },
          "proprietaryBankTransactionCode": {
            "$ref": "#/components/schemas/ProprietaryBankTransactionCode"
          },
          "balance": {
            "$ref": "#/components/schemas/TransactionBalance"
          },
          "payeeDetails": {
            "$ref": "#/components/schemas/Payee"
          },
          "payerDetails": {
            "$ref": "#/components/schemas/Payer"
          },
          "merchant": {
            "$ref": "#/components/schemas/Merchant"
          },
          "enrichment": {
            "$ref": "#/components/schemas/Enrichment"
          },
          "supplementaryData": {
            "type": "object"
          }
        }
      },
      "ApiListResponseOfTransaction": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseListMeta"
          },
          "data": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "paging": {
            "$ref": "#/components/schemas/FilteredClientPayloadListTransaction"
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      },
      "TransactionChargeDetails": {
        "type": "object",
        "properties": {
          "chargeAmount": {
            "$ref": "#/components/schemas/Amount"
          }
        }
      },
      "TransactionHash": {
        "type": "object",
        "properties": {
          "hash": {
            "type": "string"
          }
        }
      },
      "TransactionSchedule": {
        "description": "Part of a financial profile for a User.",
        "properties": {
          "frequency": {
            "type": "string",
            "description": "How often the transaction happens.  Can be 'Monthly', 'Twice monthly', 'Every two weeks', 'Every four weeks', 'Daily', 'Weekly', 'Every weekday', 'Twice daily', 'Twice every weekday'",
            "example": "Daily"
          },
          "detailedFrequency": {
            "type": "string",
            "description": "When in the cycle the transaction occurs.  Can be 'Daily', 'Twice daily', 'Twice every weekday', 'Every weekday', 'Weekly on day n', 'Every two weeks on day n', 'Monthly on working day before day n of month', 'Monthly on last working day of month', 'Twice a month on 15th and last working day of month', 'Every four weeks on day n'",
            "example": "Daily"
          },
          "detailedFrequencyParameter": {
            "type": "number",
            "description": "The n in detailedFrequency where there is one - for week-based frequencies, an integer from 0 to 6 where 0 is Monday or for month-based frequencies, an integer from 0 to 27 where 0 is the first day of the month",
            "example": 1
          }
        }
      },
      "TransactionStatusEnum": {
        "type": "string",
        "enum": [
          "BOOKED",
          "PENDING"
        ]
      },
      "TransactionStream": {
        "description": "Part of a financial profile for a User.",
        "properties": {
          "name": {
            "example": "Amazon Marketplace",
            "type": "string",
            "description": "The name of the TransactionStream"
          },
          "transactions": {
            "type": "array",
            "description": "A list of Transactions from the transaction stream.",
            "items": {
              "$ref": "#/components/schemas/EnrichedTransaction"
            }
          },
          "transactionSchedule": {
            "$ref": "#/components/schemas/TransactionSchedule"
          },
          "scheduleConsistencyScore": {
            "type": "number",
            "description": "The consistency of the transaction.  This is a number between 0 and 1 with 1 being the most consistent schedule.",
            "example": 0.44
          },
          "nextExpectedTransactionDate": {
            "type": "string",
            "format": "date",
            "description": "When is the transaction expected to occur next.",
            "example": "2019-10-04"
          },
          "earliestTransactionDate": {
            "type": "string",
            "format": "date",
            "description": "When is the first recorded transaction date",
            "example": "2020-04-24"
          },
          "mostRecentTransactionDate": {
            "type": "string",
            "format": "date",
            "description": "When is the most recent transaction date",
            "example": "2019-10-03"
          },
          "amountConsistencyScore": {
            "type": "number",
            "description": "The consistency of the amount of the transaction.  This is a number between 0 and 1 with 1 being the most consistent amount.",
            "example": 0.74
          },
          "averageAmount": {
            "type": "number",
            "description": "The average amount of the transaction stream",
            "example": 19.708
          }
        }
      },
      "TerminatedTransactionStream": {
        "description": "Terminated transaction stream generated as part of the financial profile for a User.",
        "properties": {
          "name": {
            "example": "Amazon Marketplace",
            "type": "string",
            "description": "The name of the TransactionStream"
          },
          "transactions": {
            "type": "array",
            "description": "A list of Transactions from the transaction stream.",
            "items": {
              "$ref": "#/components/schemas/EnrichedTransaction"
            }
          },
          "transactionSchedule": {
            "$ref": "#/components/schemas/TransactionSchedule"
          },
          "scheduleConsistencyScore": {
            "type": "number",
            "description": "The consistency of the transaction.  This is a number between 0 and 1 with 1 being the most consistent schedule.",
            "example": 0.44
          },
          "nextExpectedTransactionDate": {
            "type": "string",
            "format": "date",
            "description": "When is the transaction expected to occur next.",
            "example": "2019-10-04"
          },
          "earliestTransactionDate": {
            "type": "string",
            "format": "date",
            "description": "When is the first recorded transaction date",
            "example": "2020-04-24"
          },
          "mostRecentTransactionDate": {
            "type": "string",
            "format": "date",
            "description": "When is the most recent transaction date",
            "example": "2019-10-03"
          },
          "amountConsistencyScore": {
            "type": "number",
            "description": "The consistency of the amount of the transaction.  This is a number between 0 and 1 with 1 being the most consistent amount.",
            "example": 0.74
          },
          "averageAmount": {
            "type": "number",
            "description": "The average amount of the transaction stream",
            "example": 19.708
          },
          "missedTransactions": {
            "type": "integer",
            "format": "int32",
            "description": "Missed transactions of transaction stream",
            "example": 3
          }
        }
      },
      "Type": {
        "type": "string",
        "description": "The type of sca method available for the user",
        "enum": [
          "SMS_OTP",
          "CHIP_OTP",
          "PHOTO_OTP",
          "PUSH_OTP"
        ]
      },
      "UsageType": {
        "type": "string",
        "enum": [
          "PERSONAL",
          "BUSINESS",
          "OTHER",
          "UNKNOWN"
        ]
      },
      "UserCredentials": {
        "required": [
          "id",
          "password"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "description": "__Mandatory__. The login id for the user for a particular `Institution`.",
            "example": "6154057725"
          },
          "corporateId": {
            "type": "string",
            "description": "__Conditional__. The corporate login for the user for a particular corporate `Institution`.",
            "example": "6345898763"
          },
          "password": {
            "type": "string",
            "description": "__Mandatory__. The password of the user to login to a particular `Institution`.",
            "example": "PISPWD12"
          }
        },
        "description": "__Conditional__. Used to capture the user's credentials to allow them to login to an `Institution` that uses the embedded account authorisation flow. <br><br>This is the first step required in the embedded account authorisation flow to authorise the `Consent`."
      },
      "UserDeleteResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "deleteStatus": {
            "$ref": "#/components/schemas/DeleteStatusEnum"
          },
          "creationDate": {
            "type": "string",
            "format": "date-time"
          },
          "userConsents": {
            "uniqueItems": true,
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ConsentDeleteResponse"
            }
          }
        }
      },
      "ApiResponseOfUserDeleteResponse": {
        "type": "object",
        "properties": {
          "meta": {
            "$ref": "#/components/schemas/ResponseMeta"
          },
          "data": {
            "$ref": "#/components/schemas/UserDeleteResponse"
          },
          "links": {
            "type": "object",
            "additionalProperties": {
              "type": "string"
            }
          },
          "forwardedData": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/ResponseForwardedData"
            }
          },
          "raw": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/RawResponse"
            }
          },
          "tracingId": {
            "type": "string",
            "writeOnly": true
          }
        }
      }
    },
    "securitySchemes": {
      "basicAuth": {
        "description": "Requests to the Yapily API are authenticated using an Application's `APPLICATION_KEY` and `APPLICATION_SECRET`. You can view and manage your credentials in the [Yapily Dashboard](https://dashboard.yapily.com/).<br><br> An `APPLICATION_KEY` and `APPLICATION_SECRET` pair provides connectivity to each `Institution` configured in a Yapily `Application`, so it is important to keep these credentials secure. Do not share your `APPLICATION_SECRET` in publicly accessible areas such as GitHub, client-side code, etc. <br><br> Authentication is performed using HTTP Basic Authentication. `Your APPLICATION_KEY` should be sent as the basic auth `username` and your `APPLICATION_SECRET` should be sent as the basic auth `password`. <br><br> All requests should be made via HTTPS.<aside class=\"info\">HTTP Basic Authentication credentials are separated with a colon and base64 encoded to form the `authToken`, as follows: <br><br>`authToken` = Base64 encoded(`APPLICATION_KEY` + ':' + `APPLICATION_SECRET`).</aside>",
        "scheme": "basic",
        "type": "http"
      }
    }
  }
}